
displaytest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004064  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004368  08004368  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004368  08004368  00014368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004370  08004370  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004370  08004370  00014370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  080043e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000014c  080043e8  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000beb1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c33  00000000  00000000  0002bf51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002db88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  0002e4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001672e  00000000  00000000  0002ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abd1  00000000  00000000  0004544e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089048  00000000  00000000  0005001f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e24  00000000  00000000  000d90bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080041ec 	.word	0x080041ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080041ec 	.word	0x080041ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 800057e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f001 f99e 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f9be 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 fa86 	bl	8000a98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058c:	f000 fa5a 	bl	8000a44 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000590:	f000 fa22 	bl	80009d8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //инициализация дисплея
  TFT9341_ini(240, 320);
 8000594:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000598:	20f0      	movs	r0, #240	; 0xf0
 800059a:	f000 fe31 	bl	8001200 <TFT9341_ini>
  TFT9341_FillScreen(TFT9341_BLACK);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 fe12 	bl	80011c8 <TFT9341_FillScreen>
  //создание массива данных
  int sorting_data[160];
  for(int i = 0; i < 160; i++)
 80005a4:	2300      	movs	r3, #0
 80005a6:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80005aa:	e00b      	b.n	80005c4 <main+0x4c>
  {
  	  sorting_data[i] = i;
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 80005b2:	f8d7 12ac 	ldr.w	r1, [r7, #684]	; 0x2ac
 80005b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(int i = 0; i < 160; i++)
 80005ba:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80005be:	3301      	adds	r3, #1
 80005c0:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80005c4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80005c8:	2b9f      	cmp	r3, #159	; 0x9f
 80005ca:	ddef      	ble.n	80005ac <main+0x34>
  }

  srand(HAL_GetTick()); //запуск рандомайзера
 80005cc:	f001 f9de 	bl	800198c <HAL_GetTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fe8c 	bl	80032f0 <srand>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //перемешивание массива

	    for (int i = 160 - 1; i >= 1; i--)
 80005d8:	239f      	movs	r3, #159	; 0x9f
 80005da:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80005de:	e029      	b.n	8000634 <main+0xbc>
	        {
	            j = rand() % (i + 1);
 80005e0:	f002 feb4 	bl	800334c <rand>
 80005e4:	4602      	mov	r2, r0
 80005e6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80005ea:	3301      	adds	r3, #1
 80005ec:	fb92 f1f3 	sdiv	r1, r2, r3
 80005f0:	fb03 f301 	mul.w	r3, r3, r1
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8

	            int tmp = sorting_data[j];
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8000600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000604:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	            sorting_data[j] = sorting_data[i];
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 800060e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8000618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	            sorting_data[i] = tmp;
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8000622:	f8d7 1284 	ldr.w	r1, [r7, #644]	; 0x284
 8000626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    for (int i = 160 - 1; i >= 1; i--)
 800062a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800062e:	3b01      	subs	r3, #1
 8000630:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8000634:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8000638:	2b00      	cmp	r3, #0
 800063a:	dcd1      	bgt.n	80005e0 <main+0x68>
	        }

	    //первичная отрисовка
	    TFT9341_FillScreen(TFT9341_BLACK);
 800063c:	2000      	movs	r0, #0
 800063e:	f000 fdc3 	bl	80011c8 <TFT9341_FillScreen>
	    for(int i = 0; i < 160; i++)
 8000642:	2300      	movs	r3, #0
 8000644:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8000648:	e01c      	b.n	8000684 <main+0x10c>
	    {
	  	  TFT9341_FillRect(0, i*2, sorting_data[i], i*2+1, TFT9341_GREEN);
 800064a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 800064e:	b29b      	uxth	r3, r3
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	b299      	uxth	r1, r3
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 800065a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800065e:	b29a      	uxth	r2, r3
 8000660:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8000664:	b29b      	uxth	r3, r3
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	b29b      	uxth	r3, r3
 800066a:	3301      	adds	r3, #1
 800066c:	b29b      	uxth	r3, r3
 800066e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000672:	9000      	str	r0, [sp, #0]
 8000674:	2000      	movs	r0, #0
 8000676:	f000 fd33 	bl	80010e0 <TFT9341_FillRect>
	    for(int i = 0; i < 160; i++)
 800067a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 800067e:	3301      	adds	r3, #1
 8000680:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8000684:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8000688:	2b9f      	cmp	r3, #159	; 0x9f
 800068a:	ddde      	ble.n	800064a <main+0xd2>
	    }

	    //сортировка слиянием
	    merge_sort(sorting_data, 0, 159);
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	229f      	movs	r2, #159	; 0x9f
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fc50 	bl	8000f38 <merge_sort>

	    HAL_Delay(2000);
 8000698:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800069c:	f001 f982 	bl	80019a4 <HAL_Delay>


	    //перемешивание массива
		for (int i = 160 - 1; i >= 1; i--)
 80006a0:	239f      	movs	r3, #159	; 0x9f
 80006a2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80006a6:	e029      	b.n	80006fc <main+0x184>
			{
				j = rand() % (i + 1);
 80006a8:	f002 fe50 	bl	800334c <rand>
 80006ac:	4602      	mov	r2, r0
 80006ae:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80006b2:	3301      	adds	r3, #1
 80006b4:	fb92 f1f3 	sdiv	r1, r2, r3
 80006b8:	fb03 f301 	mul.w	r3, r3, r1
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8

				int tmp = sorting_data[j];
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 80006c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006cc:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
				sorting_data[j] = sorting_data[i];
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80006d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 80006e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				sorting_data[i] = tmp;
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80006ea:	f8d7 1288 	ldr.w	r1, [r7, #648]	; 0x288
 80006ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i = 160 - 1; i >= 1; i--)
 80006f2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80006f6:	3b01      	subs	r3, #1
 80006f8:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80006fc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8000700:	2b00      	cmp	r3, #0
 8000702:	dcd1      	bgt.n	80006a8 <main+0x130>
			}

		//первичная отрисовка
		TFT9341_FillScreen(TFT9341_BLACK);
 8000704:	2000      	movs	r0, #0
 8000706:	f000 fd5f 	bl	80011c8 <TFT9341_FillScreen>
		for(int i = 0; i < 160; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8000710:	e01c      	b.n	800074c <main+0x1d4>
		{
		  TFT9341_FillRect(0, i*2, sorting_data[i], i*2+1, TFT9341_GREEN);
 8000712:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8000716:	b29b      	uxth	r3, r3
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	b299      	uxth	r1, r3
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8000722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000726:	b29a      	uxth	r2, r3
 8000728:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800072c:	b29b      	uxth	r3, r3
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	b29b      	uxth	r3, r3
 8000732:	3301      	adds	r3, #1
 8000734:	b29b      	uxth	r3, r3
 8000736:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800073a:	9000      	str	r0, [sp, #0]
 800073c:	2000      	movs	r0, #0
 800073e:	f000 fccf 	bl	80010e0 <TFT9341_FillRect>
		for(int i = 0; i < 160; i++)
 8000742:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8000746:	3301      	adds	r3, #1
 8000748:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800074c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8000750:	2b9f      	cmp	r3, #159	; 0x9f
 8000752:	ddde      	ble.n	8000712 <main+0x19a>
		}
	    //сортировка выбором
	    int min_idx, temp;
	  	for (int i = 0; i < 160-1; i++)
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800075a:	e0c9      	b.n	80008f0 <main+0x378>
	  	{
	  		min_idx = i;
 800075c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000760:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	  		for (j = i + 1; j < 160; j++)
 8000764:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000768:	3301      	adds	r3, #1
 800076a:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 800076e:	e014      	b.n	800079a <main+0x222>
	  			if (sorting_data[j] < sorting_data[min_idx])
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8000776:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 8000780:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000784:	429a      	cmp	r2, r3
 8000786:	da03      	bge.n	8000790 <main+0x218>
	  				min_idx = j;
 8000788:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 800078c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	  		for (j = i + 1; j < 160; j++)
 8000790:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8000794:	3301      	adds	r3, #1
 8000796:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 800079a:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 800079e:	2b9f      	cmp	r3, #159	; 0x9f
 80007a0:	dde6      	ble.n	8000770 <main+0x1f8>


	  		TFT9341_FillRect(0, i*2, sorting_data[i], i*2+1, TFT9341_RED);
 80007a2:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	b299      	uxth	r1, r3
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80007b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80007bc:	b29b      	uxth	r3, r3
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	3301      	adds	r3, #1
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80007ca:	9000      	str	r0, [sp, #0]
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 fc87 	bl	80010e0 <TFT9341_FillRect>
	  		TFT9341_FillRect(0, min_idx*2, sorting_data[min_idx], min_idx*2+1, TFT9341_RED);
 80007d2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	b299      	uxth	r1, r3
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80007e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	3301      	adds	r3, #1
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80007fa:	9000      	str	r0, [sp, #0]
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 fc6f 	bl	80010e0 <TFT9341_FillRect>

	  		temp = sorting_data[i];
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8000808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800080c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	  		sorting_data[i] = sorting_data[min_idx];
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8000816:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8000820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  		sorting_data[min_idx] = temp;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 800082a:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 800082e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	  		HAL_Delay(100);
 8000832:	2064      	movs	r0, #100	; 0x64
 8000834:	f001 f8b6 	bl	80019a4 <HAL_Delay>
	  		TFT9341_FillRect(0, i*2, 239, i*2+1, TFT9341_BLACK);
 8000838:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800083c:	b29b      	uxth	r3, r3
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	b299      	uxth	r1, r3
 8000842:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000846:	b29b      	uxth	r3, r3
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	b29b      	uxth	r3, r3
 800084c:	3301      	adds	r3, #1
 800084e:	b29b      	uxth	r3, r3
 8000850:	2200      	movs	r2, #0
 8000852:	9200      	str	r2, [sp, #0]
 8000854:	22ef      	movs	r2, #239	; 0xef
 8000856:	2000      	movs	r0, #0
 8000858:	f000 fc42 	bl	80010e0 <TFT9341_FillRect>
	  		TFT9341_FillRect(0, min_idx*2, 239, min_idx*2+1, TFT9341_BLACK);
 800085c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8000860:	b29b      	uxth	r3, r3
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	b299      	uxth	r1, r3
 8000866:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800086a:	b29b      	uxth	r3, r3
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	b29b      	uxth	r3, r3
 8000870:	3301      	adds	r3, #1
 8000872:	b29b      	uxth	r3, r3
 8000874:	2200      	movs	r2, #0
 8000876:	9200      	str	r2, [sp, #0]
 8000878:	22ef      	movs	r2, #239	; 0xef
 800087a:	2000      	movs	r0, #0
 800087c:	f000 fc30 	bl	80010e0 <TFT9341_FillRect>

	  		TFT9341_FillRect(0, i*2, sorting_data[i], i*2+1, TFT9341_GREEN);
 8000880:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000884:	b29b      	uxth	r3, r3
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	b299      	uxth	r1, r3
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8000890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000894:	b29a      	uxth	r2, r3
 8000896:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800089a:	b29b      	uxth	r3, r3
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	b29b      	uxth	r3, r3
 80008a0:	3301      	adds	r3, #1
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80008a8:	9000      	str	r0, [sp, #0]
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fc18 	bl	80010e0 <TFT9341_FillRect>
	  		TFT9341_FillRect(0, min_idx*2, sorting_data[min_idx], min_idx*2+1, TFT9341_GREEN);
 80008b0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	b299      	uxth	r1, r3
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80008c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	3301      	adds	r3, #1
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80008d8:	9000      	str	r0, [sp, #0]
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 fc00 	bl	80010e0 <TFT9341_FillRect>

	  		HAL_Delay(50);
 80008e0:	2032      	movs	r0, #50	; 0x32
 80008e2:	f001 f85f 	bl	80019a4 <HAL_Delay>
	  	for (int i = 0; i < 160-1; i++)
 80008e6:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80008ea:	3301      	adds	r3, #1
 80008ec:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80008f0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80008f4:	2b9e      	cmp	r3, #158	; 0x9e
 80008f6:	f77f af31 	ble.w	800075c <main+0x1e4>
	  	}
	  	HAL_Delay(2000);
 80008fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008fe:	f001 f851 	bl	80019a4 <HAL_Delay>
  {
 8000902:	e669      	b.n	80005d8 <main+0x60>

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	; 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	2230      	movs	r2, #48	; 0x30
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fc3a 	bl	800318c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <SystemClock_Config+0xcc>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a27      	ldr	r2, [pc, #156]	; (80009d0 <SystemClock_Config+0xcc>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <SystemClock_Config+0xcc>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <SystemClock_Config+0xd0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <SystemClock_Config+0xd0>)
 800094e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <SystemClock_Config+0xd0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000964:	2301      	movs	r3, #1
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000968:	2310      	movs	r3, #16
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096c:	2302      	movs	r3, #2
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000970:	2300      	movs	r3, #0
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000974:	2310      	movs	r3, #16
 8000976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000978:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800097c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800097e:	2304      	movs	r3, #4
 8000980:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000982:	2304      	movs	r3, #4
 8000984:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000986:	f107 0320 	add.w	r3, r7, #32
 800098a:	4618      	mov	r0, r3
 800098c:	f001 fab2 	bl	8001ef4 <HAL_RCC_OscConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000996:	f000 fafa 	bl	8000f8e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099a:	230f      	movs	r3, #15
 800099c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099e:	2302      	movs	r3, #2
 80009a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2102      	movs	r1, #2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 fd14 	bl	80023e4 <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009c2:	f000 fae4 	bl	8000f8e <Error_Handler>
  }
}
 80009c6:	bf00      	nop
 80009c8:	3750      	adds	r7, #80	; 0x50
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_SPI2_Init+0x64>)
 80009de:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <MX_SPI2_Init+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_SPI2_Init+0x64>)
 80009e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_SPI2_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_SPI2_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_SPI2_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_SPI2_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a24:	220a      	movs	r2, #10
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a2a:	f001 fed7 	bl	80027dc <HAL_SPI_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a34:	f000 faab 	bl	8000f8e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000098 	.word	0x20000098
 8000a40:	40003800 	.word	0x40003800

08000a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <MX_USART2_UART_Init+0x50>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	f002 f93e 	bl	8002cfc <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a86:	f000 fa82 	bl	8000f8e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000f0 	.word	0x200000f0
 8000a94:	40004400 	.word	0x40004400

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <MX_GPIO_Init+0xf8>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a36      	ldr	r2, [pc, #216]	; (8000b90 <MX_GPIO_Init+0xf8>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <MX_GPIO_Init+0xf8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b30      	ldr	r3, [pc, #192]	; (8000b90 <MX_GPIO_Init+0xf8>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <MX_GPIO_Init+0xf8>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <MX_GPIO_Init+0xf8>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <MX_GPIO_Init+0xf8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a28      	ldr	r2, [pc, #160]	; (8000b90 <MX_GPIO_Init+0xf8>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <MX_GPIO_Init+0xf8>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <MX_GPIO_Init+0xf8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a21      	ldr	r2, [pc, #132]	; (8000b90 <MX_GPIO_Init+0xf8>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <MX_GPIO_Init+0xf8>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2107      	movs	r1, #7
 8000b22:	481c      	ldr	r0, [pc, #112]	; (8000b94 <MX_GPIO_Init+0xfc>)
 8000b24:	f001 f9cc 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2120      	movs	r1, #32
 8000b2c:	481a      	ldr	r0, [pc, #104]	; (8000b98 <MX_GPIO_Init+0x100>)
 8000b2e:	f001 f9c7 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b38:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4812      	ldr	r0, [pc, #72]	; (8000b94 <MX_GPIO_Init+0xfc>)
 8000b4a:	f001 f835 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b4e:	2307      	movs	r3, #7
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	480b      	ldr	r0, [pc, #44]	; (8000b94 <MX_GPIO_Init+0xfc>)
 8000b66:	f001 f827 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b6a:	2320      	movs	r3, #32
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_GPIO_Init+0x100>)
 8000b82:	f001 f819 	bl	8001bb8 <HAL_GPIO_Init>

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020000 	.word	0x40020000

08000b9c <merge>:

/* USER CODE BEGIN 4 */
void merge(int* arr, int left, int mid, int right)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 8000ba2:	af02      	add	r7, sp, #8
 8000ba4:	f107 040c 	add.w	r4, r7, #12
 8000ba8:	6020      	str	r0, [r4, #0]
 8000baa:	f107 0008 	add.w	r0, r7, #8
 8000bae:	6001      	str	r1, [r0, #0]
 8000bb0:	1d39      	adds	r1, r7, #4
 8000bb2:	600a      	str	r2, [r1, #0]
 8000bb4:	463a      	mov	r2, r7
 8000bb6:	6013      	str	r3, [r2, #0]
	int i, j, k;
	int n1 = mid - left + 1;
 8000bb8:	1d3a      	adds	r2, r7, #4
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	6812      	ldr	r2, [r2, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
	int n2 = right - mid;
 8000bca:	463a      	mov	r2, r7
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	int* l = (int*)malloc(n1 * sizeof(int));
 8000bd8:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 facc 	bl	800317c <malloc>
 8000be4:	4603      	mov	r3, r0
 8000be6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
	int* r = (int*)malloc(n2 * sizeof(int));
 8000bea:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f002 fac3 	bl	800317c <malloc>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

	int graphicsArr[160];

	for(int i = 0; i < 160; i++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8000c02:	e00c      	b.n	8000c1e <merge+0x82>
		graphicsArr[i] = -1;
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < 160; i++)
 8000c14:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8000c18:	3301      	adds	r3, #1
 8000c1a:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8000c1e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8000c22:	2b9f      	cmp	r3, #159	; 0x9f
 8000c24:	ddee      	ble.n	8000c04 <merge+0x68>

	for (i = 0; i < n1; i++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8000c2c:	e027      	b.n	8000c7e <merge+0xe2>
	{
		l[i] = arr[left + i];
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8000c38:	4413      	add	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	f107 020c 	add.w	r2, r7, #12
 8000c40:	6812      	ldr	r2, [r2, #0]
 8000c42:	441a      	add	r2, r3
 8000c44:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 8000c4e:	440b      	add	r3, r1
 8000c50:	6812      	ldr	r2, [r2, #0]
 8000c52:	601a      	str	r2, [r3, #0]
		graphicsArr[left + i] = left + i;
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8000c5e:	441a      	add	r2, r3
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8000c6a:	4419      	add	r1, r3
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < n1; i++)
 8000c74:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8000c78:	3301      	adds	r3, #1
 8000c7a:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8000c7e:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8000c82:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8000c86:	429a      	cmp	r2, r3
 8000c88:	dbd1      	blt.n	8000c2e <merge+0x92>
		//TFT9341_FillRect(0, (left + i)*2, arr[i], (left + i)*2+1, TFT9341_RED);
	}
	for (j = 0; j < n2; j++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8000c90:	e027      	b.n	8000ce2 <merge+0x146>
	{
		r[j] = arr[mid + j + 1];
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	f107 020c 	add.w	r2, r7, #12
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	441a      	add	r2, r3
 8000ca8:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 8000cb2:	440b      	add	r3, r1
 8000cb4:	6812      	ldr	r2, [r2, #0]
 8000cb6:	601a      	str	r2, [r3, #0]
		graphicsArr[mid + j + 1] = mid + j + 1;
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8000cc0:	4413      	add	r3, r2
 8000cc2:	1d3a      	adds	r2, r7, #4
 8000cc4:	6811      	ldr	r1, [r2, #0]
 8000cc6:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8000cca:	440a      	add	r2, r1
 8000ccc:	3201      	adds	r2, #1
 8000cce:	1c59      	adds	r1, r3, #1
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (j = 0; j < n2; j++)
 8000cd8:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8000cdc:	3301      	adds	r3, #1
 8000cde:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8000ce2:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8000ce6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8000cea:	429a      	cmp	r2, r3
 8000cec:	dbd1      	blt.n	8000c92 <merge+0xf6>
		//TFT9341_FillRect(0, (mid + j + 1)*2, arr[i], (mid + j + 1)*2+1, TFT9341_RED);
	}

	for(int i = 0; i < 160; i++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8000cf4:	e02b      	b.n	8000d4e <merge+0x1b2>
	{
		if(graphicsArr[i] != -1)
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8000cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d06:	d01d      	beq.n	8000d44 <merge+0x1a8>
		{
			TFT9341_FillRect(0, i*2, arr[i], i*2+1, TFT9341_RED);
 8000d08:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	b299      	uxth	r1, r3
 8000d12:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	f107 020c 	add.w	r2, r7, #12
 8000d1c:	6812      	ldr	r2, [r2, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	3301      	adds	r3, #1
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000d36:	9000      	str	r0, [sp, #0]
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f000 f9d1 	bl	80010e0 <TFT9341_FillRect>
			HAL_Delay(9);
 8000d3e:	2009      	movs	r0, #9
 8000d40:	f000 fe30 	bl	80019a4 <HAL_Delay>
	for(int i = 0; i < 160; i++)
 8000d44:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8000d48:	3301      	adds	r3, #1
 8000d4a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8000d4e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8000d52:	2b9f      	cmp	r3, #159	; 0x9f
 8000d54:	ddcf      	ble.n	8000cf6 <merge+0x15a>
		}
	}

	HAL_Delay(100);
 8000d56:	2064      	movs	r0, #100	; 0x64
 8000d58:	f000 fe24 	bl	80019a4 <HAL_Delay>

	i = 0; j = 0; k = left;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
	while ((i < n1) && (j < n2)) {
 8000d72:	e03d      	b.n	8000df0 <merge+0x254>
		if (l[i] <= r[j]) {
 8000d74:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8000d7e:	4413      	add	r3, r2
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 8000d8c:	440b      	add	r3, r1
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dc14      	bgt.n	8000dbe <merge+0x222>
			arr[k] = l[i];
 8000d94:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8000d9e:	441a      	add	r2, r3
 8000da0:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	f107 010c 	add.w	r1, r7, #12
 8000daa:	6809      	ldr	r1, [r1, #0]
 8000dac:	440b      	add	r3, r1
 8000dae:	6812      	ldr	r2, [r2, #0]
 8000db0:	601a      	str	r2, [r3, #0]
			i++;
 8000db2:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8000db6:	3301      	adds	r3, #1
 8000db8:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8000dbc:	e013      	b.n	8000de6 <merge+0x24a>
		}
		else {
			arr[k] = r[j];
 8000dbe:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8000dc8:	441a      	add	r2, r3
 8000dca:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	f107 010c 	add.w	r1, r7, #12
 8000dd4:	6809      	ldr	r1, [r1, #0]
 8000dd6:	440b      	add	r3, r1
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	601a      	str	r2, [r3, #0]
			j++;
 8000ddc:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8000de0:	3301      	adds	r3, #1
 8000de2:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
		}
		k++;
 8000de6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000dea:	3301      	adds	r3, #1
 8000dec:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
	while ((i < n1) && (j < n2)) {
 8000df0:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8000df4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	da1f      	bge.n	8000e3c <merge+0x2a0>
 8000dfc:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8000e00:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbb5      	blt.n	8000d74 <merge+0x1d8>
	}

	while (i < n1) {
 8000e08:	e018      	b.n	8000e3c <merge+0x2a0>
		arr[k] = l[i];
 8000e0a:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8000e14:	441a      	add	r2, r3
 8000e16:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	f107 010c 	add.w	r1, r7, #12
 8000e20:	6809      	ldr	r1, [r1, #0]
 8000e22:	440b      	add	r3, r1
 8000e24:	6812      	ldr	r2, [r2, #0]
 8000e26:	601a      	str	r2, [r3, #0]
		i++;
 8000e28:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
		k++;
 8000e32:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000e36:	3301      	adds	r3, #1
 8000e38:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
	while (i < n1) {
 8000e3c:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8000e40:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbe0      	blt.n	8000e0a <merge+0x26e>
	}

	while (j < n2) {
 8000e48:	e018      	b.n	8000e7c <merge+0x2e0>
		arr[k] = r[j];
 8000e4a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8000e54:	441a      	add	r2, r3
 8000e56:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	f107 010c 	add.w	r1, r7, #12
 8000e60:	6809      	ldr	r1, [r1, #0]
 8000e62:	440b      	add	r3, r1
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	601a      	str	r2, [r3, #0]
		j++;
 8000e68:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
		k++;
 8000e72:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000e76:	3301      	adds	r3, #1
 8000e78:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
	while (j < n2) {
 8000e7c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8000e80:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbe0      	blt.n	8000e4a <merge+0x2ae>
	}

	for(int i = 0; i < 160; i++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8000e8e:	e01f      	b.n	8000ed0 <merge+0x334>
		{
			if(graphicsArr[i] != -1)
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8000e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea0:	d011      	beq.n	8000ec6 <merge+0x32a>
			{
				TFT9341_FillRect(0, i*2, 239, i*2+1, TFT9341_BLACK);
 8000ea2:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	b299      	uxth	r1, r3
 8000eac:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	2200      	movs	r2, #0
 8000ebc:	9200      	str	r2, [sp, #0]
 8000ebe:	22ef      	movs	r2, #239	; 0xef
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f000 f90d 	bl	80010e0 <TFT9341_FillRect>
	for(int i = 0; i < 160; i++)
 8000ec6:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8000eca:	3301      	adds	r3, #1
 8000ecc:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8000ed0:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8000ed4:	2b9f      	cmp	r3, #159	; 0x9f
 8000ed6:	dddb      	ble.n	8000e90 <merge+0x2f4>
			}
		}
	for(int i = 0; i < 160; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8000ede:	e01f      	b.n	8000f20 <merge+0x384>
	{
	  TFT9341_FillRect(0, i*2, arr[i], i*2+1, TFT9341_GREEN);
 8000ee0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	b299      	uxth	r1, r3
 8000eea:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	f107 020c 	add.w	r2, r7, #12
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000f0e:	9000      	str	r0, [sp, #0]
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 f8e5 	bl	80010e0 <TFT9341_FillRect>
	for(int i = 0; i < 160; i++)
 8000f16:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8000f20:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8000f24:	2b9f      	cmp	r3, #159	; 0x9f
 8000f26:	dddb      	ble.n	8000ee0 <merge+0x344>
	}
	HAL_Delay(100);
 8000f28:	2064      	movs	r0, #100	; 0x64
 8000f2a:	f000 fd3b 	bl	80019a4 <HAL_Delay>
}
 8000f2e:	bf00      	nop
 8000f30:	f507 7731 	add.w	r7, r7, #708	; 0x2c4
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd90      	pop	{r4, r7, pc}

08000f38 <merge_sort>:

void merge_sort(int* arr, int left, int right)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
	if (left >= right)
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	da1c      	bge.n	8000f86 <merge_sort+0x4e>
		return;
	int mid = left + (right - left) / 2;
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	0fda      	lsrs	r2, r3, #31
 8000f54:	4413      	add	r3, r2
 8000f56:	105b      	asrs	r3, r3, #1
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	617b      	str	r3, [r7, #20]
	merge_sort(arr, left, mid);
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f7ff ffe7 	bl	8000f38 <merge_sort>
	merge_sort(arr, mid + 1, right);
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4619      	mov	r1, r3
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f7ff ffe0 	bl	8000f38 <merge_sort>
	merge(arr, left, mid, right);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f7ff fe0c 	bl	8000b9c <merge>
 8000f84:	e000      	b.n	8000f88 <merge_sort+0x50>
		return;
 8000f86:	bf00      	nop
}
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f92:	b672      	cpsid	i
}
 8000f94:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <Error_Handler+0x8>

08000f98 <TFT9341_SendCommand>:

uint16_t TFT9341_WIDTH;
uint16_t TFT9341_HEIGHT;

void TFT9341_SendCommand(uint8_t cmd)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <TFT9341_SendCommand+0x2c>)
 8000fa8:	f000 ff8a 	bl	8001ec0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi2, &cmd, 1, 5000);
 8000fac:	1df9      	adds	r1, r7, #7
 8000fae:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <TFT9341_SendCommand+0x30>)
 8000fb6:	f001 fc9a 	bl	80028ee <HAL_SPI_Transmit>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	20000098 	.word	0x20000098

08000fcc <TFT9341_WriteData>:
{
	DC_DATA();
	HAL_SPI_Transmit (&hspi2, &dt, 1, 5000);
}

static void TFT9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <TFT9341_WriteData+0x54>)
 8000fdc:	f000 ff70 	bl	8001ec0 <HAL_GPIO_WritePin>
	while(buff_size > 0) {
 8000fe0:	e015      	b.n	800100e <TFT9341_WriteData+0x42>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fe8:	bf28      	it	cs
 8000fea:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000fee:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 8000ff0:	89fa      	ldrh	r2, [r7, #14]
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <TFT9341_WriteData+0x58>)
 8000ffa:	f001 fc78 	bl	80028ee <HAL_SPI_Transmit>
		buff += chunk_size;
 8000ffe:	89fb      	ldrh	r3, [r7, #14]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001006:	89fb      	ldrh	r3, [r7, #14]
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	603b      	str	r3, [r7, #0]
	while(buff_size > 0) {
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1e6      	bne.n	8000fe2 <TFT9341_WriteData+0x16>
	}
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40020800 	.word	0x40020800
 8001024:	20000098 	.word	0x20000098

08001028 <TFT9341_reset>:

void TFT9341_reset(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 800102c:	2200      	movs	r2, #0
 800102e:	2101      	movs	r1, #1
 8001030:	4806      	ldr	r0, [pc, #24]	; (800104c <TFT9341_reset+0x24>)
 8001032:	f000 ff45 	bl	8001ec0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001036:	2005      	movs	r0, #5
 8001038:	f000 fcb4 	bl	80019a4 <HAL_Delay>
	RESET_IDLE();
 800103c:	2201      	movs	r2, #1
 800103e:	2101      	movs	r1, #1
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <TFT9341_reset+0x24>)
 8001042:	f000 ff3d 	bl	8001ec0 <HAL_GPIO_WritePin>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020800 	.word	0x40020800

08001050 <TFT9341_SetAddrWindow>:

static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	4604      	mov	r4, r0
 8001058:	4608      	mov	r0, r1
 800105a:	4611      	mov	r1, r2
 800105c:	461a      	mov	r2, r3
 800105e:	4623      	mov	r3, r4
 8001060:	80fb      	strh	r3, [r7, #6]
 8001062:	4603      	mov	r3, r0
 8001064:	80bb      	strh	r3, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	807b      	strh	r3, [r7, #2]
 800106a:	4613      	mov	r3, r2
 800106c:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 800106e:	202a      	movs	r0, #42	; 0x2a
 8001070:	f7ff ff92 	bl	8000f98 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	b29b      	uxth	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	733b      	strb	r3, [r7, #12]
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	737b      	strb	r3, [r7, #13]
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	0a1b      	lsrs	r3, r3, #8
 8001088:	b29b      	uxth	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	73bb      	strb	r3, [r7, #14]
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2104      	movs	r1, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff96 	bl	8000fcc <TFT9341_WriteData>
  }

  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 80010a0:	202b      	movs	r0, #43	; 0x2b
 80010a2:	f7ff ff79 	bl	8000f98 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	723b      	strb	r3, [r7, #8]
 80010b0:	88bb      	ldrh	r3, [r7, #4]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	727b      	strb	r3, [r7, #9]
 80010b6:	883b      	ldrh	r3, [r7, #0]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	72bb      	strb	r3, [r7, #10]
 80010c0:	883b      	ldrh	r3, [r7, #0]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	2104      	movs	r1, #4
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff7d 	bl	8000fcc <TFT9341_WriteData>
  }

  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 80010d2:	202c      	movs	r0, #44	; 0x2c
 80010d4:	f7ff ff60 	bl	8000f98 <TFT9341_SendCommand>
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd90      	pop	{r4, r7, pc}

080010e0 <TFT9341_FillRect>:

void TFT9341_FillRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4604      	mov	r4, r0
 80010e8:	4608      	mov	r0, r1
 80010ea:	4611      	mov	r1, r2
 80010ec:	461a      	mov	r2, r3
 80010ee:	4623      	mov	r3, r4
 80010f0:	80fb      	strh	r3, [r7, #6]
 80010f2:	4603      	mov	r3, r0
 80010f4:	80bb      	strh	r3, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	807b      	strh	r3, [r7, #2]
 80010fa:	4613      	mov	r3, r2
 80010fc:	803b      	strh	r3, [r7, #0]
  if((x1 >= TFT9341_WIDTH) || (y1 >= TFT9341_HEIGHT) || (x2 >= TFT9341_WIDTH) || (y2 >= TFT9341_HEIGHT)) return;
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <TFT9341_FillRect+0xd8>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	88fa      	ldrh	r2, [r7, #6]
 8001104:	429a      	cmp	r2, r3
 8001106:	d252      	bcs.n	80011ae <TFT9341_FillRect+0xce>
 8001108:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <TFT9341_FillRect+0xdc>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	88ba      	ldrh	r2, [r7, #4]
 800110e:	429a      	cmp	r2, r3
 8001110:	d24d      	bcs.n	80011ae <TFT9341_FillRect+0xce>
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <TFT9341_FillRect+0xd8>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	429a      	cmp	r2, r3
 800111a:	d248      	bcs.n	80011ae <TFT9341_FillRect+0xce>
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <TFT9341_FillRect+0xdc>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	883a      	ldrh	r2, [r7, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d243      	bcs.n	80011ae <TFT9341_FillRect+0xce>
	if(x1>x2) swap(x1,x2);
 8001126:	88fa      	ldrh	r2, [r7, #6]
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	429a      	cmp	r2, r3
 800112c:	d905      	bls.n	800113a <TFT9341_FillRect+0x5a>
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	827b      	strh	r3, [r7, #18]
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	80fb      	strh	r3, [r7, #6]
 8001136:	8a7b      	ldrh	r3, [r7, #18]
 8001138:	807b      	strh	r3, [r7, #2]
	if(y1>y2) swap(y1,y2);
 800113a:	88ba      	ldrh	r2, [r7, #4]
 800113c:	883b      	ldrh	r3, [r7, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d905      	bls.n	800114e <TFT9341_FillRect+0x6e>
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	823b      	strh	r3, [r7, #16]
 8001146:	883b      	ldrh	r3, [r7, #0]
 8001148:	80bb      	strh	r3, [r7, #4]
 800114a:	8a3b      	ldrh	r3, [r7, #16]
 800114c:	803b      	strh	r3, [r7, #0]
  TFT9341_SetAddrWindow(x1, y1, x2, y2);
 800114e:	883b      	ldrh	r3, [r7, #0]
 8001150:	887a      	ldrh	r2, [r7, #2]
 8001152:	88b9      	ldrh	r1, [r7, #4]
 8001154:	88f8      	ldrh	r0, [r7, #6]
 8001156:	f7ff ff7b 	bl	8001050 <TFT9341_SetAddrWindow>
  uint8_t data[] = { color >> 8, color & 0xFF };
 800115a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	b29b      	uxth	r3, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	733b      	strb	r3, [r7, #12]
 8001164:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001166:	b2db      	uxtb	r3, r3
 8001168:	737b      	strb	r3, [r7, #13]
  DC_DATA();
 800116a:	2201      	movs	r2, #1
 800116c:	2102      	movs	r1, #2
 800116e:	4814      	ldr	r0, [pc, #80]	; (80011c0 <TFT9341_FillRect+0xe0>)
 8001170:	f000 fea6 	bl	8001ec0 <HAL_GPIO_WritePin>
  for(uint32_t i = 0; i < (x2-x1+1)*(y2-y1+1); i++)
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	e00a      	b.n	8001190 <TFT9341_FillRect+0xb0>
  {
      HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
 800117a:	f107 010c 	add.w	r1, r7, #12
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	2202      	movs	r2, #2
 8001184:	480f      	ldr	r0, [pc, #60]	; (80011c4 <TFT9341_FillRect+0xe4>)
 8001186:	f001 fbb2 	bl	80028ee <HAL_SPI_Transmit>
  for(uint32_t i = 0; i < (x2-x1+1)*(y2-y1+1); i++)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	3301      	adds	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	887a      	ldrh	r2, [r7, #2]
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	3301      	adds	r3, #1
 8001198:	8839      	ldrh	r1, [r7, #0]
 800119a:	88ba      	ldrh	r2, [r7, #4]
 800119c:	1a8a      	subs	r2, r1, r2
 800119e:	3201      	adds	r2, #1
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d3e6      	bcc.n	800117a <TFT9341_FillRect+0x9a>
 80011ac:	e000      	b.n	80011b0 <TFT9341_FillRect+0xd0>
  if((x1 >= TFT9341_WIDTH) || (y1 >= TFT9341_HEIGHT) || (x2 >= TFT9341_WIDTH) || (y2 >= TFT9341_HEIGHT)) return;
 80011ae:	bf00      	nop
  }
}
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd90      	pop	{r4, r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000136 	.word	0x20000136
 80011bc:	20000134 	.word	0x20000134
 80011c0:	40020800 	.word	0x40020800
 80011c4:	20000098 	.word	0x20000098

080011c8 <TFT9341_FillScreen>:

void TFT9341_FillScreen(uint16_t color)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
  TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <TFT9341_FillScreen+0x30>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <TFT9341_FillScreen+0x34>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	3b01      	subs	r3, #1
 80011e0:	b299      	uxth	r1, r3
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	460b      	mov	r3, r1
 80011e8:	2100      	movs	r1, #0
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff ff78 	bl	80010e0 <TFT9341_FillRect>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000136 	.word	0x20000136
 80011fc:	20000134 	.word	0x20000134

08001200 <TFT9341_ini>:

void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	460a      	mov	r2, r1
 800120a:	80fb      	strh	r3, [r7, #6]
 800120c:	4613      	mov	r3, r2
 800120e:	80bb      	strh	r3, [r7, #4]
	uint8_t data[15];
 	CS_ACTIVE();
 8001210:	2200      	movs	r2, #0
 8001212:	2104      	movs	r1, #4
 8001214:	48a5      	ldr	r0, [pc, #660]	; (80014ac <TFT9341_ini+0x2ac>)
 8001216:	f000 fe53 	bl	8001ec0 <HAL_GPIO_WritePin>
 	TFT9341_reset();
 800121a:	f7ff ff05 	bl	8001028 <TFT9341_reset>
 	//Software Reset
	 TFT9341_SendCommand(0x01);
 800121e:	2001      	movs	r0, #1
 8001220:	f7ff feba 	bl	8000f98 <TFT9341_SendCommand>
	 HAL_Delay(1000);
 8001224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001228:	f000 fbbc 	bl	80019a4 <HAL_Delay>
	 //Power Control A
	   data[0] = 0x39;
 800122c:	2339      	movs	r3, #57	; 0x39
 800122e:	723b      	strb	r3, [r7, #8]
	   data[1] = 0x2C;
 8001230:	232c      	movs	r3, #44	; 0x2c
 8001232:	727b      	strb	r3, [r7, #9]
	   data[2] = 0x00;
 8001234:	2300      	movs	r3, #0
 8001236:	72bb      	strb	r3, [r7, #10]
	   data[3] = 0x34;
 8001238:	2334      	movs	r3, #52	; 0x34
 800123a:	72fb      	strb	r3, [r7, #11]
	   data[4] = 0x02;
 800123c:	2302      	movs	r3, #2
 800123e:	733b      	strb	r3, [r7, #12]
	   TFT9341_SendCommand(0xCB);
 8001240:	20cb      	movs	r0, #203	; 0xcb
 8001242:	f7ff fea9 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 5);
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	2105      	movs	r1, #5
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff febd 	bl	8000fcc <TFT9341_WriteData>
	   //Power Control B
	   data[0] = 0x00;
 8001252:	2300      	movs	r3, #0
 8001254:	723b      	strb	r3, [r7, #8]
	   data[1] = 0xC1;
 8001256:	23c1      	movs	r3, #193	; 0xc1
 8001258:	727b      	strb	r3, [r7, #9]
	   data[2] = 0x30;
 800125a:	2330      	movs	r3, #48	; 0x30
 800125c:	72bb      	strb	r3, [r7, #10]
	   TFT9341_SendCommand(0xCF);
 800125e:	20cf      	movs	r0, #207	; 0xcf
 8001260:	f7ff fe9a 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 3);
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	2103      	movs	r1, #3
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff feae 	bl	8000fcc <TFT9341_WriteData>
	   //Driver timing control A
	   data[0] = 0x85;
 8001270:	2385      	movs	r3, #133	; 0x85
 8001272:	723b      	strb	r3, [r7, #8]
	   data[1] = 0x00;
 8001274:	2300      	movs	r3, #0
 8001276:	727b      	strb	r3, [r7, #9]
	   data[2] = 0x78;
 8001278:	2378      	movs	r3, #120	; 0x78
 800127a:	72bb      	strb	r3, [r7, #10]
	   TFT9341_SendCommand(0xE8);
 800127c:	20e8      	movs	r0, #232	; 0xe8
 800127e:	f7ff fe8b 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 3);
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	2103      	movs	r1, #3
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fe9f 	bl	8000fcc <TFT9341_WriteData>
	   //Driver timing control B
	   data[0] = 0x00;
 800128e:	2300      	movs	r3, #0
 8001290:	723b      	strb	r3, [r7, #8]
	   data[1] = 0x00;
 8001292:	2300      	movs	r3, #0
 8001294:	727b      	strb	r3, [r7, #9]
	   TFT9341_SendCommand(0xEA);
 8001296:	20ea      	movs	r0, #234	; 0xea
 8001298:	f7ff fe7e 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 2);
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	2102      	movs	r1, #2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fe92 	bl	8000fcc <TFT9341_WriteData>
	   //Power on Sequence control
	   data[0] = 0x64;
 80012a8:	2364      	movs	r3, #100	; 0x64
 80012aa:	723b      	strb	r3, [r7, #8]
	   data[1] = 0x03;
 80012ac:	2303      	movs	r3, #3
 80012ae:	727b      	strb	r3, [r7, #9]
	   data[2] = 0x12;
 80012b0:	2312      	movs	r3, #18
 80012b2:	72bb      	strb	r3, [r7, #10]
	   data[3] = 0x81;
 80012b4:	2381      	movs	r3, #129	; 0x81
 80012b6:	72fb      	strb	r3, [r7, #11]
	   TFT9341_SendCommand(0xED);
 80012b8:	20ed      	movs	r0, #237	; 0xed
 80012ba:	f7ff fe6d 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 4);
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	2104      	movs	r1, #4
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe81 	bl	8000fcc <TFT9341_WriteData>
	   //Pump ratio control
	   data[0] = 0x20;
 80012ca:	2320      	movs	r3, #32
 80012cc:	723b      	strb	r3, [r7, #8]
	   TFT9341_SendCommand(0xF7);
 80012ce:	20f7      	movs	r0, #247	; 0xf7
 80012d0:	f7ff fe62 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 1);
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	2101      	movs	r1, #1
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe76 	bl	8000fcc <TFT9341_WriteData>
	   //Power Control,VRH[5:0]
	   data[0] = 0x10;
 80012e0:	2310      	movs	r3, #16
 80012e2:	723b      	strb	r3, [r7, #8]
	   TFT9341_SendCommand(0xC0);
 80012e4:	20c0      	movs	r0, #192	; 0xc0
 80012e6:	f7ff fe57 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 1);
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	2101      	movs	r1, #1
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe6b 	bl	8000fcc <TFT9341_WriteData>
	   //Power Control,SAP[2:0];BT[3:0]
	   data[0] = 0x10;
 80012f6:	2310      	movs	r3, #16
 80012f8:	723b      	strb	r3, [r7, #8]
	   TFT9341_SendCommand(0xC1);
 80012fa:	20c1      	movs	r0, #193	; 0xc1
 80012fc:	f7ff fe4c 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 1);
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	2101      	movs	r1, #1
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe60 	bl	8000fcc <TFT9341_WriteData>
	   //VCOM Control 1
	   data[0] = 0x3E;
 800130c:	233e      	movs	r3, #62	; 0x3e
 800130e:	723b      	strb	r3, [r7, #8]
	   data[1] = 0x28;
 8001310:	2328      	movs	r3, #40	; 0x28
 8001312:	727b      	strb	r3, [r7, #9]
	   TFT9341_SendCommand(0xC5);
 8001314:	20c5      	movs	r0, #197	; 0xc5
 8001316:	f7ff fe3f 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 2);
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	2102      	movs	r1, #2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe53 	bl	8000fcc <TFT9341_WriteData>
	   //VCOM Control 2
	   data[0] = 0x86;
 8001326:	2386      	movs	r3, #134	; 0x86
 8001328:	723b      	strb	r3, [r7, #8]
	   TFT9341_SendCommand(0xC7);
 800132a:	20c7      	movs	r0, #199	; 0xc7
 800132c:	f7ff fe34 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 1);
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	2101      	movs	r1, #1
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fe48 	bl	8000fcc <TFT9341_WriteData>
	   //Memory Acsess Control
	   data[0] = 0x48;
 800133c:	2348      	movs	r3, #72	; 0x48
 800133e:	723b      	strb	r3, [r7, #8]
	   TFT9341_SendCommand(0x36);
 8001340:	2036      	movs	r0, #54	; 0x36
 8001342:	f7ff fe29 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 1);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2101      	movs	r1, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe3d 	bl	8000fcc <TFT9341_WriteData>
	   //Pixel Format Set
	   data[0] = 0x55;//16bit
 8001352:	2355      	movs	r3, #85	; 0x55
 8001354:	723b      	strb	r3, [r7, #8]
	   TFT9341_SendCommand(0x3A);
 8001356:	203a      	movs	r0, #58	; 0x3a
 8001358:	f7ff fe1e 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 1);
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	2101      	movs	r1, #1
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fe32 	bl	8000fcc <TFT9341_WriteData>
	   //Frame Rratio Control, Standard RGB Color
	   data[0] = 0x00;
 8001368:	2300      	movs	r3, #0
 800136a:	723b      	strb	r3, [r7, #8]
	   data[1] = 0x18;
 800136c:	2318      	movs	r3, #24
 800136e:	727b      	strb	r3, [r7, #9]
	   TFT9341_SendCommand(0xB1);
 8001370:	20b1      	movs	r0, #177	; 0xb1
 8001372:	f7ff fe11 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 2);
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2102      	movs	r1, #2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe25 	bl	8000fcc <TFT9341_WriteData>
	   //Display Function Control
	   data[0] = 0x08;
 8001382:	2308      	movs	r3, #8
 8001384:	723b      	strb	r3, [r7, #8]
	   data[1] = 0x82;
 8001386:	2382      	movs	r3, #130	; 0x82
 8001388:	727b      	strb	r3, [r7, #9]
	   data[2] = 0x27;//320 строк
 800138a:	2327      	movs	r3, #39	; 0x27
 800138c:	72bb      	strb	r3, [r7, #10]
	   TFT9341_SendCommand(0xB6);
 800138e:	20b6      	movs	r0, #182	; 0xb6
 8001390:	f7ff fe02 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 3);
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	2103      	movs	r1, #3
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fe16 	bl	8000fcc <TFT9341_WriteData>
	   //Enable 3G (пока не знаю что это за режим)
	   data[0] = 0x00;//не включаем
 80013a0:	2300      	movs	r3, #0
 80013a2:	723b      	strb	r3, [r7, #8]
	   TFT9341_SendCommand(0xF2);
 80013a4:	20f2      	movs	r0, #242	; 0xf2
 80013a6:	f7ff fdf7 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 1);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2101      	movs	r1, #1
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe0b 	bl	8000fcc <TFT9341_WriteData>
	   //Gamma set
	   data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 80013b6:	2301      	movs	r3, #1
 80013b8:	723b      	strb	r3, [r7, #8]
	   TFT9341_SendCommand(0x26);
 80013ba:	2026      	movs	r0, #38	; 0x26
 80013bc:	f7ff fdec 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 1);
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	2101      	movs	r1, #1
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fe00 	bl	8000fcc <TFT9341_WriteData>
	   //Positive Gamma  Correction
	   data[0] = 0x0F;
 80013cc:	230f      	movs	r3, #15
 80013ce:	723b      	strb	r3, [r7, #8]
	   data[1] = 0x31;
 80013d0:	2331      	movs	r3, #49	; 0x31
 80013d2:	727b      	strb	r3, [r7, #9]
	   data[2] = 0x2B;
 80013d4:	232b      	movs	r3, #43	; 0x2b
 80013d6:	72bb      	strb	r3, [r7, #10]
	   data[3] = 0x0C;
 80013d8:	230c      	movs	r3, #12
 80013da:	72fb      	strb	r3, [r7, #11]
	   data[4] = 0x0E;
 80013dc:	230e      	movs	r3, #14
 80013de:	733b      	strb	r3, [r7, #12]
	   data[5] = 0x08;
 80013e0:	2308      	movs	r3, #8
 80013e2:	737b      	strb	r3, [r7, #13]
	   data[6] = 0x4E;
 80013e4:	234e      	movs	r3, #78	; 0x4e
 80013e6:	73bb      	strb	r3, [r7, #14]
	   data[7] = 0xF1;
 80013e8:	23f1      	movs	r3, #241	; 0xf1
 80013ea:	73fb      	strb	r3, [r7, #15]
	   data[8] = 0x37;
 80013ec:	2337      	movs	r3, #55	; 0x37
 80013ee:	743b      	strb	r3, [r7, #16]
	   data[9] = 0x07;
 80013f0:	2307      	movs	r3, #7
 80013f2:	747b      	strb	r3, [r7, #17]
	   data[10] = 0x10;
 80013f4:	2310      	movs	r3, #16
 80013f6:	74bb      	strb	r3, [r7, #18]
	   data[11] = 0x03;
 80013f8:	2303      	movs	r3, #3
 80013fa:	74fb      	strb	r3, [r7, #19]
	   data[12] = 0x0E;
 80013fc:	230e      	movs	r3, #14
 80013fe:	753b      	strb	r3, [r7, #20]
	   data[13] = 0x09;
 8001400:	2309      	movs	r3, #9
 8001402:	757b      	strb	r3, [r7, #21]
	   data[14] = 0x00;
 8001404:	2300      	movs	r3, #0
 8001406:	75bb      	strb	r3, [r7, #22]
	   TFT9341_SendCommand(0xE0);
 8001408:	20e0      	movs	r0, #224	; 0xe0
 800140a:	f7ff fdc5 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 15);
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	210f      	movs	r1, #15
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fdd9 	bl	8000fcc <TFT9341_WriteData>
	   //Negative Gamma  Correction
	   data[0] = 0x00;
 800141a:	2300      	movs	r3, #0
 800141c:	723b      	strb	r3, [r7, #8]
	   data[1] = 0x0E;
 800141e:	230e      	movs	r3, #14
 8001420:	727b      	strb	r3, [r7, #9]
	   data[2] = 0x14;
 8001422:	2314      	movs	r3, #20
 8001424:	72bb      	strb	r3, [r7, #10]
	   data[3] = 0x03;
 8001426:	2303      	movs	r3, #3
 8001428:	72fb      	strb	r3, [r7, #11]
	   data[4] = 0x11;
 800142a:	2311      	movs	r3, #17
 800142c:	733b      	strb	r3, [r7, #12]
	   data[5] = 0x07;
 800142e:	2307      	movs	r3, #7
 8001430:	737b      	strb	r3, [r7, #13]
	   data[6] = 0x31;
 8001432:	2331      	movs	r3, #49	; 0x31
 8001434:	73bb      	strb	r3, [r7, #14]
	   data[7] = 0xC1;
 8001436:	23c1      	movs	r3, #193	; 0xc1
 8001438:	73fb      	strb	r3, [r7, #15]
	   data[8] = 0x48;
 800143a:	2348      	movs	r3, #72	; 0x48
 800143c:	743b      	strb	r3, [r7, #16]
	   data[9] = 0x08;
 800143e:	2308      	movs	r3, #8
 8001440:	747b      	strb	r3, [r7, #17]
	   data[10] = 0x0F;
 8001442:	230f      	movs	r3, #15
 8001444:	74bb      	strb	r3, [r7, #18]
	   data[11] = 0x0C;
 8001446:	230c      	movs	r3, #12
 8001448:	74fb      	strb	r3, [r7, #19]
	   data[12] = 0x31;
 800144a:	2331      	movs	r3, #49	; 0x31
 800144c:	753b      	strb	r3, [r7, #20]
	   data[13] = 0x36;
 800144e:	2336      	movs	r3, #54	; 0x36
 8001450:	757b      	strb	r3, [r7, #21]
	   data[14] = 0x0F;
 8001452:	230f      	movs	r3, #15
 8001454:	75bb      	strb	r3, [r7, #22]
	   TFT9341_SendCommand(0xE1);
 8001456:	20e1      	movs	r0, #225	; 0xe1
 8001458:	f7ff fd9e 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 15);
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	210f      	movs	r1, #15
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fdb2 	bl	8000fcc <TFT9341_WriteData>
	   TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 8001468:	2011      	movs	r0, #17
 800146a:	f7ff fd95 	bl	8000f98 <TFT9341_SendCommand>
	   HAL_Delay(120);
 800146e:	2078      	movs	r0, #120	; 0x78
 8001470:	f000 fa98 	bl	80019a4 <HAL_Delay>
	   //Display ON
	   data[0] = TFT9341_ROTATION;
 8001474:	2348      	movs	r3, #72	; 0x48
 8001476:	723b      	strb	r3, [r7, #8]
	   TFT9341_SendCommand(0x29);
 8001478:	2029      	movs	r0, #41	; 0x29
 800147a:	f7ff fd8d 	bl	8000f98 <TFT9341_SendCommand>
	   TFT9341_WriteData(data, 1);
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	2101      	movs	r1, #1
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fda1 	bl	8000fcc <TFT9341_WriteData>
	   TFT9341_WriteData(data, 1);
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	2101      	movs	r1, #1
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fd9b 	bl	8000fcc <TFT9341_WriteData>
	     TFT9341_WIDTH = w_size;
 8001496:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <TFT9341_ini+0x2b0>)
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	8013      	strh	r3, [r2, #0]
	     TFT9341_HEIGHT = h_size;
 800149c:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <TFT9341_ini+0x2b4>)
 800149e:	88bb      	ldrh	r3, [r7, #4]
 80014a0:	8013      	strh	r3, [r2, #0]
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40020800 	.word	0x40020800
 80014b0:	20000136 	.word	0x20000136
 80014b4:	20000134 	.word	0x20000134

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_MspInit+0x4c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <HAL_MspInit+0x4c>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_MspInit+0x4c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_MspInit+0x4c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_MspInit+0x4c>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_MspInit+0x4c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014f6:	2007      	movs	r0, #7
 80014f8:	f000 fb2a 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a28      	ldr	r2, [pc, #160]	; (80015c8 <HAL_SPI_MspInit+0xc0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d14a      	bne.n	80015c0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_SPI_MspInit+0xc4>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a26      	ldr	r2, [pc, #152]	; (80015cc <HAL_SPI_MspInit+0xc4>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_SPI_MspInit+0xc4>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_SPI_MspInit+0xc4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <HAL_SPI_MspInit+0xc4>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_SPI_MspInit+0xc4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_SPI_MspInit+0xc4>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a18      	ldr	r2, [pc, #96]	; (80015cc <HAL_SPI_MspInit+0xc4>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_SPI_MspInit+0xc4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800157e:	2308      	movs	r3, #8
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800158e:	2305      	movs	r3, #5
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <HAL_SPI_MspInit+0xc8>)
 800159a:	f000 fb0d 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800159e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015b0:	2305      	movs	r3, #5
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <HAL_SPI_MspInit+0xcc>)
 80015bc:	f000 fafc 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	; 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40003800 	.word	0x40003800
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020400 	.word	0x40020400

080015d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	; (800165c <HAL_UART_MspInit+0x84>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12b      	bne.n	8001652 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_UART_MspInit+0x88>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a17      	ldr	r2, [pc, #92]	; (8001660 <HAL_UART_MspInit+0x88>)
 8001604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_UART_MspInit+0x88>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_UART_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <HAL_UART_MspInit+0x88>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_UART_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001632:	230c      	movs	r3, #12
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001642:	2307      	movs	r3, #7
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <HAL_UART_MspInit+0x8c>)
 800164e:	f000 fab3 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40004400 	.word	0x40004400
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800166c:	e7fe      	b.n	800166c <NMI_Handler+0x4>

0800166e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <MemManage_Handler+0x4>

0800167a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <UsageFault_Handler+0x4>

08001686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f000 f956 	bl	8001964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
	return 1;
 80016c0:	2301      	movs	r3, #1
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_kill>:

int _kill(int pid, int sig)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016d6:	f001 fd27 	bl	8003128 <__errno>
 80016da:	4603      	mov	r3, r0
 80016dc:	2216      	movs	r2, #22
 80016de:	601a      	str	r2, [r3, #0]
	return -1;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_exit>:

void _exit (int status)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ffe7 	bl	80016cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80016fe:	e7fe      	b.n	80016fe <_exit+0x12>

08001700 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e00a      	b.n	8001728 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001712:	f3af 8000 	nop.w
 8001716:	4601      	mov	r1, r0
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	b2ca      	uxtb	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf0      	blt.n	8001712 <_read+0x12>
	}

return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e009      	b.n	8001760 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	60ba      	str	r2, [r7, #8]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf1      	blt.n	800174c <_write+0x12>
	}
	return len;
 8001768:	687b      	ldr	r3, [r7, #4]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_close>:

int _close(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
	return -1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800179a:	605a      	str	r2, [r3, #4]
	return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <_isatty>:

int _isatty(int file)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	return 1;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
	return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <_sbrk+0x5c>)
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <_sbrk+0x60>)
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <_sbrk+0x64>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <_sbrk+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	d207      	bcs.n	800181c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800180c:	f001 fc8c 	bl	8003128 <__errno>
 8001810:	4603      	mov	r3, r0
 8001812:	220c      	movs	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e009      	b.n	8001830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <_sbrk+0x64>)
 800182c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20020000 	.word	0x20020000
 800183c:	00000800 	.word	0x00000800
 8001840:	2000008c 	.word	0x2000008c
 8001844:	20000150 	.word	0x20000150

08001848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <SystemInit+0x20>)
 800184e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <SystemInit+0x20>)
 8001854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001872:	490e      	ldr	r1, [pc, #56]	; (80018ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001874:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001888:	4c0b      	ldr	r4, [pc, #44]	; (80018b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001896:	f7ff ffd7 	bl	8001848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189a:	f001 fc4b 	bl	8003134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189e:	f7fe fe6b 	bl	8000578 <main>
  bx  lr    
 80018a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018b0:	08004378 	.word	0x08004378
  ldr r2, =_sbss
 80018b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018b8:	2000014c 	.word	0x2000014c

080018bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC_IRQHandler>
	...

080018c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_Init+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <HAL_Init+0x40>)
 80018ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_Init+0x40>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_Init+0x40>)
 80018d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a07      	ldr	r2, [pc, #28]	; (8001900 <HAL_Init+0x40>)
 80018e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e8:	2003      	movs	r0, #3
 80018ea:	f000 f931 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f000 f808 	bl	8001904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f4:	f7ff fde0 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023c00 	.word	0x40023c00

08001904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_InitTick+0x54>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_InitTick+0x58>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191a:	fbb3 f3f1 	udiv	r3, r3, r1
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f93b 	bl	8001b9e <HAL_SYSTICK_Config>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e00e      	b.n	8001950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b0f      	cmp	r3, #15
 8001936:	d80a      	bhi.n	800194e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001938:	2200      	movs	r2, #0
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f000 f911 	bl	8001b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001944:	4a06      	ldr	r2, [pc, #24]	; (8001960 <HAL_InitTick+0x5c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	e000      	b.n	8001950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000000 	.word	0x20000000
 800195c:	20000008 	.word	0x20000008
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x20>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x24>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_IncTick+0x24>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008
 8001988:	20000138 	.word	0x20000138

0800198c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_GetTick+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000138 	.word	0x20000138

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff ffee 	bl	800198c <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_Delay+0x44>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ca:	bf00      	nop
 80019cc:	f7ff ffde 	bl	800198c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000008 	.word	0x20000008

080019ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1e:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	60d3      	str	r3, [r2, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <__NVIC_GetPriorityGrouping+0x18>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	f003 0307 	and.w	r3, r3, #7
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	db0a      	blt.n	8001a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	490c      	ldr	r1, [pc, #48]	; (8001a9c <__NVIC_SetPriority+0x4c>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	440b      	add	r3, r1
 8001a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a78:	e00a      	b.n	8001a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4908      	ldr	r1, [pc, #32]	; (8001aa0 <__NVIC_SetPriority+0x50>)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	3b04      	subs	r3, #4
 8001a88:	0112      	lsls	r2, r2, #4
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	761a      	strb	r2, [r3, #24]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000e100 	.word	0xe000e100
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f1c3 0307 	rsb	r3, r3, #7
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	bf28      	it	cs
 8001ac2:	2304      	movcs	r3, #4
 8001ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d902      	bls.n	8001ad4 <NVIC_EncodePriority+0x30>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3b03      	subs	r3, #3
 8001ad2:	e000      	b.n	8001ad6 <NVIC_EncodePriority+0x32>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	43d9      	mvns	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	4313      	orrs	r3, r2
         );
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3724      	adds	r7, #36	; 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1c:	d301      	bcc.n	8001b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00f      	b.n	8001b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <SysTick_Config+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f7ff ff8e 	bl	8001a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <SysTick_Config+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <SysTick_Config+0x40>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	e000e010 	.word	0xe000e010

08001b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff47 	bl	80019ec <__NVIC_SetPriorityGrouping>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b78:	f7ff ff5c 	bl	8001a34 <__NVIC_GetPriorityGrouping>
 8001b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff ff8e 	bl	8001aa4 <NVIC_EncodePriority>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff5d 	bl	8001a50 <__NVIC_SetPriority>
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffb0 	bl	8001b0c <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	e159      	b.n	8001e88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f040 8148 	bne.w	8001e82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d005      	beq.n	8001c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d130      	bne.n	8001c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 0201 	and.w	r2, r3, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d017      	beq.n	8001ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d123      	bne.n	8001cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	08da      	lsrs	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3208      	adds	r2, #8
 8001cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	08da      	lsrs	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3208      	adds	r2, #8
 8001cf6:	69b9      	ldr	r1, [r7, #24]
 8001cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0203 	and.w	r2, r3, #3
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80a2 	beq.w	8001e82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b57      	ldr	r3, [pc, #348]	; (8001ea0 <HAL_GPIO_Init+0x2e8>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	4a56      	ldr	r2, [pc, #344]	; (8001ea0 <HAL_GPIO_Init+0x2e8>)
 8001d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4e:	4b54      	ldr	r3, [pc, #336]	; (8001ea0 <HAL_GPIO_Init+0x2e8>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d5a:	4a52      	ldr	r2, [pc, #328]	; (8001ea4 <HAL_GPIO_Init+0x2ec>)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	220f      	movs	r2, #15
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a49      	ldr	r2, [pc, #292]	; (8001ea8 <HAL_GPIO_Init+0x2f0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_GPIO_Init+0x202>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a48      	ldr	r2, [pc, #288]	; (8001eac <HAL_GPIO_Init+0x2f4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <HAL_GPIO_Init+0x1fe>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a47      	ldr	r2, [pc, #284]	; (8001eb0 <HAL_GPIO_Init+0x2f8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00d      	beq.n	8001db2 <HAL_GPIO_Init+0x1fa>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a46      	ldr	r2, [pc, #280]	; (8001eb4 <HAL_GPIO_Init+0x2fc>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <HAL_GPIO_Init+0x1f6>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a45      	ldr	r2, [pc, #276]	; (8001eb8 <HAL_GPIO_Init+0x300>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_GPIO_Init+0x1f2>
 8001da6:	2304      	movs	r3, #4
 8001da8:	e008      	b.n	8001dbc <HAL_GPIO_Init+0x204>
 8001daa:	2307      	movs	r3, #7
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x204>
 8001dae:	2303      	movs	r3, #3
 8001db0:	e004      	b.n	8001dbc <HAL_GPIO_Init+0x204>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e002      	b.n	8001dbc <HAL_GPIO_Init+0x204>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_GPIO_Init+0x204>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	f002 0203 	and.w	r2, r2, #3
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	4093      	lsls	r3, r2
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dcc:	4935      	ldr	r1, [pc, #212]	; (8001ea4 <HAL_GPIO_Init+0x2ec>)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dda:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dfe:	4a2f      	ldr	r2, [pc, #188]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e04:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e28:	4a24      	ldr	r2, [pc, #144]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e52:	4a1a      	ldr	r2, [pc, #104]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e7c:	4a0f      	ldr	r2, [pc, #60]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3301      	adds	r3, #1
 8001e86:	61fb      	str	r3, [r7, #28]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2b0f      	cmp	r3, #15
 8001e8c:	f67f aea2 	bls.w	8001bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3724      	adds	r7, #36	; 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40013800 	.word	0x40013800
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	40020800 	.word	0x40020800
 8001eb4:	40020c00 	.word	0x40020c00
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40013c00 	.word	0x40013c00

08001ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed0:	787b      	ldrb	r3, [r7, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001edc:	e003      	b.n	8001ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	041a      	lsls	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	619a      	str	r2, [r3, #24]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e264      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d075      	beq.n	8001ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f12:	4ba3      	ldr	r3, [pc, #652]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d00c      	beq.n	8001f38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1e:	4ba0      	ldr	r3, [pc, #640]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d112      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2a:	4b9d      	ldr	r3, [pc, #628]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f36:	d10b      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f38:	4b99      	ldr	r3, [pc, #612]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d05b      	beq.n	8001ffc <HAL_RCC_OscConfig+0x108>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d157      	bne.n	8001ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e23f      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f58:	d106      	bne.n	8001f68 <HAL_RCC_OscConfig+0x74>
 8001f5a:	4b91      	ldr	r3, [pc, #580]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a90      	ldr	r2, [pc, #576]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e01d      	b.n	8001fa4 <HAL_RCC_OscConfig+0xb0>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x98>
 8001f72:	4b8b      	ldr	r3, [pc, #556]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a8a      	ldr	r2, [pc, #552]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b88      	ldr	r3, [pc, #544]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a87      	ldr	r2, [pc, #540]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e00b      	b.n	8001fa4 <HAL_RCC_OscConfig+0xb0>
 8001f8c:	4b84      	ldr	r3, [pc, #528]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a83      	ldr	r2, [pc, #524]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b81      	ldr	r3, [pc, #516]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a80      	ldr	r2, [pc, #512]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d013      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fcee 	bl	800198c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff fcea 	bl	800198c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e204      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b76      	ldr	r3, [pc, #472]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0xc0>
 8001fd2:	e014      	b.n	8001ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fcda 	bl	800198c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7ff fcd6 	bl	800198c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1f0      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	4b6c      	ldr	r3, [pc, #432]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0xe8>
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d063      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800200a:	4b65      	ldr	r3, [pc, #404]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00b      	beq.n	800202e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002016:	4b62      	ldr	r3, [pc, #392]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800201e:	2b08      	cmp	r3, #8
 8002020:	d11c      	bne.n	800205c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b5f      	ldr	r3, [pc, #380]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d116      	bne.n	800205c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202e:	4b5c      	ldr	r3, [pc, #368]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_RCC_OscConfig+0x152>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e1c4      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002046:	4b56      	ldr	r3, [pc, #344]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4952      	ldr	r1, [pc, #328]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205a:	e03a      	b.n	80020d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002064:	4b4f      	ldr	r3, [pc, #316]	; (80021a4 <HAL_RCC_OscConfig+0x2b0>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7ff fc8f 	bl	800198c <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002072:	f7ff fc8b 	bl	800198c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e1a5      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	4b46      	ldr	r3, [pc, #280]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b43      	ldr	r3, [pc, #268]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4940      	ldr	r1, [pc, #256]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
 80020a4:	e015      	b.n	80020d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a6:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <HAL_RCC_OscConfig+0x2b0>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7ff fc6e 	bl	800198c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b4:	f7ff fc6a 	bl	800198c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e184      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d030      	beq.n	8002140 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e6:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <HAL_RCC_OscConfig+0x2b4>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ec:	f7ff fc4e 	bl	800198c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f4:	f7ff fc4a 	bl	800198c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e164      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x200>
 8002112:	e015      	b.n	8002140 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002114:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_RCC_OscConfig+0x2b4>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7ff fc37 	bl	800198c <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002122:	f7ff fc33 	bl	800198c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e14d      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8002136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80a0 	beq.w	800228e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10f      	bne.n	800217e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217a:	2301      	movs	r3, #1
 800217c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_OscConfig+0x2b8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d121      	bne.n	80021ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_RCC_OscConfig+0x2b8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_RCC_OscConfig+0x2b8>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002196:	f7ff fbf9 	bl	800198c <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	e011      	b.n	80021c2 <HAL_RCC_OscConfig+0x2ce>
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	42470000 	.word	0x42470000
 80021a8:	42470e80 	.word	0x42470e80
 80021ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b0:	f7ff fbec 	bl	800198c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e106      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	4b85      	ldr	r3, [pc, #532]	; (80023d8 <HAL_RCC_OscConfig+0x4e4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d106      	bne.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
 80021d6:	4b81      	ldr	r3, [pc, #516]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	4a80      	ldr	r2, [pc, #512]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6713      	str	r3, [r2, #112]	; 0x70
 80021e2:	e01c      	b.n	800221e <HAL_RCC_OscConfig+0x32a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d10c      	bne.n	8002206 <HAL_RCC_OscConfig+0x312>
 80021ec:	4b7b      	ldr	r3, [pc, #492]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a7a      	ldr	r2, [pc, #488]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70
 80021f8:	4b78      	ldr	r3, [pc, #480]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a77      	ldr	r2, [pc, #476]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	e00b      	b.n	800221e <HAL_RCC_OscConfig+0x32a>
 8002206:	4b75      	ldr	r3, [pc, #468]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	4a74      	ldr	r2, [pc, #464]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6713      	str	r3, [r2, #112]	; 0x70
 8002212:	4b72      	ldr	r3, [pc, #456]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	4a71      	ldr	r2, [pc, #452]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d015      	beq.n	8002252 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002226:	f7ff fbb1 	bl	800198c <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7ff fbad 	bl	800198c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	; 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0c5      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	4b65      	ldr	r3, [pc, #404]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ee      	beq.n	800222e <HAL_RCC_OscConfig+0x33a>
 8002250:	e014      	b.n	800227c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7ff fb9b 	bl	800198c <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7ff fb97 	bl	800198c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e0af      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	4b5a      	ldr	r3, [pc, #360]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1ee      	bne.n	800225a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4b56      	ldr	r3, [pc, #344]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a55      	ldr	r2, [pc, #340]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 809b 	beq.w	80023ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002298:	4b50      	ldr	r3, [pc, #320]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d05c      	beq.n	800235e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d141      	bne.n	8002330 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ac:	4b4c      	ldr	r3, [pc, #304]	; (80023e0 <HAL_RCC_OscConfig+0x4ec>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7ff fb6b 	bl	800198c <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ba:	f7ff fb67 	bl	800198c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e081      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022cc:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f0      	bne.n	80022ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69da      	ldr	r2, [r3, #28]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	019b      	lsls	r3, r3, #6
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	085b      	lsrs	r3, r3, #1
 80022f0:	3b01      	subs	r3, #1
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	061b      	lsls	r3, r3, #24
 80022fc:	4937      	ldr	r1, [pc, #220]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002302:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <HAL_RCC_OscConfig+0x4ec>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fb40 	bl	800198c <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002310:	f7ff fb3c 	bl	800198c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e056      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002322:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x41c>
 800232e:	e04e      	b.n	80023ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002330:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <HAL_RCC_OscConfig+0x4ec>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7ff fb29 	bl	800198c <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233e:	f7ff fb25 	bl	800198c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e03f      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002350:	4b22      	ldr	r3, [pc, #136]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x44a>
 800235c:	e037      	b.n	80023ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e032      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_RCC_OscConfig+0x4e8>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d028      	beq.n	80023ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d121      	bne.n	80023ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d11a      	bne.n	80023ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800239a:	4013      	ands	r3, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d111      	bne.n	80023ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	3b01      	subs	r3, #1
 80023b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40007000 	.word	0x40007000
 80023dc:	40023800 	.word	0x40023800
 80023e0:	42470060 	.word	0x42470060

080023e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0cc      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f8:	4b68      	ldr	r3, [pc, #416]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d90c      	bls.n	8002420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b65      	ldr	r3, [pc, #404]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b8      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800245a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	494d      	ldr	r1, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d044      	beq.n	8002504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d119      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d003      	beq.n	80024a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e06f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e067      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	4b37      	ldr	r3, [pc, #220]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4934      	ldr	r1, [pc, #208]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d4:	f7ff fa5a 	bl	800198c <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7ff fa56 	bl	800198c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e04f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 020c 	and.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1eb      	bne.n	80024dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d20c      	bcs.n	800252c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e032      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4916      	ldr	r1, [pc, #88]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800256a:	f000 f821 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	490a      	ldr	r1, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f9ba 	bl	8001904 <HAL_InitTick>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023c00 	.word	0x40023c00
 80025a0:	40023800 	.word	0x40023800
 80025a4:	08004204 	.word	0x08004204
 80025a8:	20000000 	.word	0x20000000
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	2300      	movs	r3, #0
 80025c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025c8:	4b67      	ldr	r3, [pc, #412]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d00d      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x40>
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	f200 80bd 	bhi.w	8002754 <HAL_RCC_GetSysClockFreq+0x1a4>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x34>
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x3a>
 80025e2:	e0b7      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e4:	4b61      	ldr	r3, [pc, #388]	; (800276c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80025e6:	60bb      	str	r3, [r7, #8]
       break;
 80025e8:	e0b7      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ea:	4b61      	ldr	r3, [pc, #388]	; (8002770 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80025ec:	60bb      	str	r3, [r7, #8]
      break;
 80025ee:	e0b4      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f0:	4b5d      	ldr	r3, [pc, #372]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025fa:	4b5b      	ldr	r3, [pc, #364]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d04d      	beq.n	80026a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002606:	4b58      	ldr	r3, [pc, #352]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	461a      	mov	r2, r3
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002616:	f04f 0100 	mov.w	r1, #0
 800261a:	ea02 0800 	and.w	r8, r2, r0
 800261e:	ea03 0901 	and.w	r9, r3, r1
 8002622:	4640      	mov	r0, r8
 8002624:	4649      	mov	r1, r9
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	014b      	lsls	r3, r1, #5
 8002630:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002634:	0142      	lsls	r2, r0, #5
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	ebb0 0008 	subs.w	r0, r0, r8
 800263e:	eb61 0109 	sbc.w	r1, r1, r9
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	018b      	lsls	r3, r1, #6
 800264c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002650:	0182      	lsls	r2, r0, #6
 8002652:	1a12      	subs	r2, r2, r0
 8002654:	eb63 0301 	sbc.w	r3, r3, r1
 8002658:	f04f 0000 	mov.w	r0, #0
 800265c:	f04f 0100 	mov.w	r1, #0
 8002660:	00d9      	lsls	r1, r3, #3
 8002662:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002666:	00d0      	lsls	r0, r2, #3
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	eb12 0208 	adds.w	r2, r2, r8
 8002670:	eb43 0309 	adc.w	r3, r3, r9
 8002674:	f04f 0000 	mov.w	r0, #0
 8002678:	f04f 0100 	mov.w	r1, #0
 800267c:	0259      	lsls	r1, r3, #9
 800267e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002682:	0250      	lsls	r0, r2, #9
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	461a      	mov	r2, r3
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	f7fd fdf4 	bl	8000280 <__aeabi_uldivmod>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4613      	mov	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	e04a      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a2:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	099b      	lsrs	r3, r3, #6
 80026a8:	461a      	mov	r2, r3
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026b2:	f04f 0100 	mov.w	r1, #0
 80026b6:	ea02 0400 	and.w	r4, r2, r0
 80026ba:	ea03 0501 	and.w	r5, r3, r1
 80026be:	4620      	mov	r0, r4
 80026c0:	4629      	mov	r1, r5
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	014b      	lsls	r3, r1, #5
 80026cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026d0:	0142      	lsls	r2, r0, #5
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	1b00      	subs	r0, r0, r4
 80026d8:	eb61 0105 	sbc.w	r1, r1, r5
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	018b      	lsls	r3, r1, #6
 80026e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026ea:	0182      	lsls	r2, r0, #6
 80026ec:	1a12      	subs	r2, r2, r0
 80026ee:	eb63 0301 	sbc.w	r3, r3, r1
 80026f2:	f04f 0000 	mov.w	r0, #0
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	00d9      	lsls	r1, r3, #3
 80026fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002700:	00d0      	lsls	r0, r2, #3
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	1912      	adds	r2, r2, r4
 8002708:	eb45 0303 	adc.w	r3, r5, r3
 800270c:	f04f 0000 	mov.w	r0, #0
 8002710:	f04f 0100 	mov.w	r1, #0
 8002714:	0299      	lsls	r1, r3, #10
 8002716:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800271a:	0290      	lsls	r0, r2, #10
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	461a      	mov	r2, r3
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	f7fd fda8 	bl	8000280 <__aeabi_uldivmod>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4613      	mov	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	3301      	adds	r3, #1
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	60bb      	str	r3, [r7, #8]
      break;
 8002752:	e002      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002756:	60bb      	str	r3, [r7, #8]
      break;
 8002758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275a:	68bb      	ldr	r3, [r7, #8]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	00f42400 	.word	0x00f42400
 8002770:	007a1200 	.word	0x007a1200

08002774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCC_GetHCLKFreq+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000000 	.word	0x20000000

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002790:	f7ff fff0 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0a9b      	lsrs	r3, r3, #10
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4903      	ldr	r1, [pc, #12]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08004214 	.word	0x08004214

080027b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027b8:	f7ff ffdc 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0b5b      	lsrs	r3, r3, #13
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4903      	ldr	r1, [pc, #12]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	08004214 	.word	0x08004214

080027dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e07b      	b.n	80028e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d108      	bne.n	8002808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027fe:	d009      	beq.n	8002814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
 8002806:	e005      	b.n	8002814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe fe6a 	bl	8001508 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800284a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002898:	ea42 0103 	orr.w	r1, r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	f003 0104 	and.w	r1, r3, #4
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	f003 0210 	and.w	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b088      	sub	sp, #32
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_SPI_Transmit+0x22>
 800290c:	2302      	movs	r3, #2
 800290e:	e126      	b.n	8002b5e <HAL_SPI_Transmit+0x270>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002918:	f7ff f838 	bl	800198c <HAL_GetTick>
 800291c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d002      	beq.n	8002934 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800292e:	2302      	movs	r3, #2
 8002930:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002932:	e10b      	b.n	8002b4c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_SPI_Transmit+0x52>
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002944:	e102      	b.n	8002b4c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2203      	movs	r2, #3
 800294a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	88fa      	ldrh	r2, [r7, #6]
 800295e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	88fa      	ldrh	r2, [r7, #6]
 8002964:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800298c:	d10f      	bne.n	80029ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b8:	2b40      	cmp	r3, #64	; 0x40
 80029ba:	d007      	beq.n	80029cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d4:	d14b      	bne.n	8002a6e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_SPI_Transmit+0xf6>
 80029de:	8afb      	ldrh	r3, [r7, #22]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d13e      	bne.n	8002a62 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	881a      	ldrh	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	1c9a      	adds	r2, r3, #2
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a08:	e02b      	b.n	8002a62 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d112      	bne.n	8002a3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	881a      	ldrh	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	1c9a      	adds	r2, r3, #2
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a3c:	e011      	b.n	8002a62 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a3e:	f7fe ffa5 	bl	800198c <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d803      	bhi.n	8002a56 <HAL_SPI_Transmit+0x168>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d102      	bne.n	8002a5c <HAL_SPI_Transmit+0x16e>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a60:	e074      	b.n	8002b4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ce      	bne.n	8002a0a <HAL_SPI_Transmit+0x11c>
 8002a6c:	e04c      	b.n	8002b08 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_SPI_Transmit+0x18e>
 8002a76:	8afb      	ldrh	r3, [r7, #22]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d140      	bne.n	8002afe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	330c      	adds	r3, #12
 8002a86:	7812      	ldrb	r2, [r2, #0]
 8002a88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002aa2:	e02c      	b.n	8002afe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d113      	bne.n	8002ada <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	330c      	adds	r3, #12
 8002abc:	7812      	ldrb	r2, [r2, #0]
 8002abe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ad8:	e011      	b.n	8002afe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ada:	f7fe ff57 	bl	800198c <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d803      	bhi.n	8002af2 <HAL_SPI_Transmit+0x204>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d102      	bne.n	8002af8 <HAL_SPI_Transmit+0x20a>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002afc:	e026      	b.n	8002b4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1cd      	bne.n	8002aa4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	6839      	ldr	r1, [r7, #0]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f8b3 	bl	8002c78 <SPI_EndRxTxTransaction>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	77fb      	strb	r3, [r7, #31]
 8002b48:	e000      	b.n	8002b4c <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3720      	adds	r7, #32
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b78:	f7fe ff08 	bl	800198c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	4413      	add	r3, r2
 8002b86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b88:	f7fe ff00 	bl	800198c <HAL_GetTick>
 8002b8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b8e:	4b39      	ldr	r3, [pc, #228]	; (8002c74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	015b      	lsls	r3, r3, #5
 8002b94:	0d1b      	lsrs	r3, r3, #20
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	fb02 f303 	mul.w	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b9e:	e054      	b.n	8002c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba6:	d050      	beq.n	8002c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ba8:	f7fe fef0 	bl	800198c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d902      	bls.n	8002bbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d13d      	bne.n	8002c3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bd6:	d111      	bne.n	8002bfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be0:	d004      	beq.n	8002bec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bea:	d107      	bne.n	8002bfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c04:	d10f      	bne.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e017      	b.n	8002c6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4013      	ands	r3, r2
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	bf0c      	ite	eq
 8002c5a:	2301      	moveq	r3, #1
 8002c5c:	2300      	movne	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d19b      	bne.n	8002ba0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000000 	.word	0x20000000

08002c78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <SPI_EndRxTxTransaction+0x7c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <SPI_EndRxTxTransaction+0x80>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0d5b      	lsrs	r3, r3, #21
 8002c90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c94:	fb02 f303 	mul.w	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ca2:	d112      	bne.n	8002cca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2200      	movs	r2, #0
 8002cac:	2180      	movs	r1, #128	; 0x80
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff ff5a 	bl	8002b68 <SPI_WaitFlagStateUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d016      	beq.n	8002ce8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	f043 0220 	orr.w	r2, r3, #32
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e00f      	b.n	8002cea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b80      	cmp	r3, #128	; 0x80
 8002ce2:	d0f2      	beq.n	8002cca <SPI_EndRxTxTransaction+0x52>
 8002ce4:	e000      	b.n	8002ce8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ce6:	bf00      	nop
  }

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	165e9f81 	.word	0x165e9f81

08002cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e03f      	b.n	8002d8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe fc58 	bl	80015d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f829 	bl	8002d98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d9c:	b09f      	sub	sp, #124	; 0x7c
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dae:	68d9      	ldr	r1, [r3, #12]
 8002db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	ea40 0301 	orr.w	r3, r0, r1
 8002db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ddc:	f021 010c 	bic.w	r1, r1, #12
 8002de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de6:	430b      	orrs	r3, r1
 8002de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	6999      	ldr	r1, [r3, #24]
 8002df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	ea40 0301 	orr.w	r3, r0, r1
 8002e00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4bc5      	ldr	r3, [pc, #788]	; (800311c <UART_SetConfig+0x384>)
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d004      	beq.n	8002e16 <UART_SetConfig+0x7e>
 8002e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4bc3      	ldr	r3, [pc, #780]	; (8003120 <UART_SetConfig+0x388>)
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d103      	bne.n	8002e1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e16:	f7ff fccd 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8002e1a:	6778      	str	r0, [r7, #116]	; 0x74
 8002e1c:	e002      	b.n	8002e24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e1e:	f7ff fcb5 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8002e22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2c:	f040 80b6 	bne.w	8002f9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e32:	461c      	mov	r4, r3
 8002e34:	f04f 0500 	mov.w	r5, #0
 8002e38:	4622      	mov	r2, r4
 8002e3a:	462b      	mov	r3, r5
 8002e3c:	1891      	adds	r1, r2, r2
 8002e3e:	6439      	str	r1, [r7, #64]	; 0x40
 8002e40:	415b      	adcs	r3, r3
 8002e42:	647b      	str	r3, [r7, #68]	; 0x44
 8002e44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e48:	1912      	adds	r2, r2, r4
 8002e4a:	eb45 0303 	adc.w	r3, r5, r3
 8002e4e:	f04f 0000 	mov.w	r0, #0
 8002e52:	f04f 0100 	mov.w	r1, #0
 8002e56:	00d9      	lsls	r1, r3, #3
 8002e58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e5c:	00d0      	lsls	r0, r2, #3
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	1911      	adds	r1, r2, r4
 8002e64:	6639      	str	r1, [r7, #96]	; 0x60
 8002e66:	416b      	adcs	r3, r5
 8002e68:	667b      	str	r3, [r7, #100]	; 0x64
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	1891      	adds	r1, r2, r2
 8002e76:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e78:	415b      	adcs	r3, r3
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e84:	f7fd f9fc 	bl	8000280 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4ba5      	ldr	r3, [pc, #660]	; (8003124 <UART_SetConfig+0x38c>)
 8002e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	011e      	lsls	r6, r3, #4
 8002e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e98:	461c      	mov	r4, r3
 8002e9a:	f04f 0500 	mov.w	r5, #0
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	1891      	adds	r1, r2, r2
 8002ea4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ea6:	415b      	adcs	r3, r3
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002eae:	1912      	adds	r2, r2, r4
 8002eb0:	eb45 0303 	adc.w	r3, r5, r3
 8002eb4:	f04f 0000 	mov.w	r0, #0
 8002eb8:	f04f 0100 	mov.w	r1, #0
 8002ebc:	00d9      	lsls	r1, r3, #3
 8002ebe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ec2:	00d0      	lsls	r0, r2, #3
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	1911      	adds	r1, r2, r4
 8002eca:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ecc:	416b      	adcs	r3, r5
 8002ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	1891      	adds	r1, r2, r2
 8002edc:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ede:	415b      	adcs	r3, r3
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ee6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002eea:	f7fd f9c9 	bl	8000280 <__aeabi_uldivmod>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4b8c      	ldr	r3, [pc, #560]	; (8003124 <UART_SetConfig+0x38c>)
 8002ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	2164      	movs	r1, #100	; 0x64
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	3332      	adds	r3, #50	; 0x32
 8002f06:	4a87      	ldr	r2, [pc, #540]	; (8003124 <UART_SetConfig+0x38c>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f14:	441e      	add	r6, r3
 8002f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	1894      	adds	r4, r2, r2
 8002f24:	623c      	str	r4, [r7, #32]
 8002f26:	415b      	adcs	r3, r3
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f2e:	1812      	adds	r2, r2, r0
 8002f30:	eb41 0303 	adc.w	r3, r1, r3
 8002f34:	f04f 0400 	mov.w	r4, #0
 8002f38:	f04f 0500 	mov.w	r5, #0
 8002f3c:	00dd      	lsls	r5, r3, #3
 8002f3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f42:	00d4      	lsls	r4, r2, #3
 8002f44:	4622      	mov	r2, r4
 8002f46:	462b      	mov	r3, r5
 8002f48:	1814      	adds	r4, r2, r0
 8002f4a:	653c      	str	r4, [r7, #80]	; 0x50
 8002f4c:	414b      	adcs	r3, r1
 8002f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	461a      	mov	r2, r3
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	1891      	adds	r1, r2, r2
 8002f5c:	61b9      	str	r1, [r7, #24]
 8002f5e:	415b      	adcs	r3, r3
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f6a:	f7fd f989 	bl	8000280 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4b6c      	ldr	r3, [pc, #432]	; (8003124 <UART_SetConfig+0x38c>)
 8002f74:	fba3 1302 	umull	r1, r3, r3, r2
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	2164      	movs	r1, #100	; 0x64
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	3332      	adds	r3, #50	; 0x32
 8002f86:	4a67      	ldr	r2, [pc, #412]	; (8003124 <UART_SetConfig+0x38c>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	f003 0207 	and.w	r2, r3, #7
 8002f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4432      	add	r2, r6
 8002f98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f9a:	e0b9      	b.n	8003110 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9e:	461c      	mov	r4, r3
 8002fa0:	f04f 0500 	mov.w	r5, #0
 8002fa4:	4622      	mov	r2, r4
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	1891      	adds	r1, r2, r2
 8002faa:	6139      	str	r1, [r7, #16]
 8002fac:	415b      	adcs	r3, r3
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fb4:	1912      	adds	r2, r2, r4
 8002fb6:	eb45 0303 	adc.w	r3, r5, r3
 8002fba:	f04f 0000 	mov.w	r0, #0
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	00d9      	lsls	r1, r3, #3
 8002fc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fc8:	00d0      	lsls	r0, r2, #3
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	eb12 0804 	adds.w	r8, r2, r4
 8002fd2:	eb43 0905 	adc.w	r9, r3, r5
 8002fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f04f 0100 	mov.w	r1, #0
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	008b      	lsls	r3, r1, #2
 8002fea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fee:	0082      	lsls	r2, r0, #2
 8002ff0:	4640      	mov	r0, r8
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	f7fd f944 	bl	8000280 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4b49      	ldr	r3, [pc, #292]	; (8003124 <UART_SetConfig+0x38c>)
 8002ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	011e      	lsls	r6, r3, #4
 8003006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003008:	4618      	mov	r0, r3
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	1894      	adds	r4, r2, r2
 8003014:	60bc      	str	r4, [r7, #8]
 8003016:	415b      	adcs	r3, r3
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800301e:	1812      	adds	r2, r2, r0
 8003020:	eb41 0303 	adc.w	r3, r1, r3
 8003024:	f04f 0400 	mov.w	r4, #0
 8003028:	f04f 0500 	mov.w	r5, #0
 800302c:	00dd      	lsls	r5, r3, #3
 800302e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003032:	00d4      	lsls	r4, r2, #3
 8003034:	4622      	mov	r2, r4
 8003036:	462b      	mov	r3, r5
 8003038:	1814      	adds	r4, r2, r0
 800303a:	64bc      	str	r4, [r7, #72]	; 0x48
 800303c:	414b      	adcs	r3, r1
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	f04f 0100 	mov.w	r1, #0
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	008b      	lsls	r3, r1, #2
 8003054:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003058:	0082      	lsls	r2, r0, #2
 800305a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800305e:	f7fd f90f 	bl	8000280 <__aeabi_uldivmod>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <UART_SetConfig+0x38c>)
 8003068:	fba3 1302 	umull	r1, r3, r3, r2
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	2164      	movs	r1, #100	; 0x64
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	3332      	adds	r3, #50	; 0x32
 800307a:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <UART_SetConfig+0x38c>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003086:	441e      	add	r6, r3
 8003088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800308a:	4618      	mov	r0, r3
 800308c:	f04f 0100 	mov.w	r1, #0
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	1894      	adds	r4, r2, r2
 8003096:	603c      	str	r4, [r7, #0]
 8003098:	415b      	adcs	r3, r3
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030a0:	1812      	adds	r2, r2, r0
 80030a2:	eb41 0303 	adc.w	r3, r1, r3
 80030a6:	f04f 0400 	mov.w	r4, #0
 80030aa:	f04f 0500 	mov.w	r5, #0
 80030ae:	00dd      	lsls	r5, r3, #3
 80030b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030b4:	00d4      	lsls	r4, r2, #3
 80030b6:	4622      	mov	r2, r4
 80030b8:	462b      	mov	r3, r5
 80030ba:	eb12 0a00 	adds.w	sl, r2, r0
 80030be:	eb43 0b01 	adc.w	fp, r3, r1
 80030c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f04f 0100 	mov.w	r1, #0
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	008b      	lsls	r3, r1, #2
 80030d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030da:	0082      	lsls	r2, r0, #2
 80030dc:	4650      	mov	r0, sl
 80030de:	4659      	mov	r1, fp
 80030e0:	f7fd f8ce 	bl	8000280 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <UART_SetConfig+0x38c>)
 80030ea:	fba3 1302 	umull	r1, r3, r3, r2
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2164      	movs	r1, #100	; 0x64
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	3332      	adds	r3, #50	; 0x32
 80030fc:	4a09      	ldr	r2, [pc, #36]	; (8003124 <UART_SetConfig+0x38c>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	f003 020f 	and.w	r2, r3, #15
 8003108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4432      	add	r2, r6
 800310e:	609a      	str	r2, [r3, #8]
}
 8003110:	bf00      	nop
 8003112:	377c      	adds	r7, #124	; 0x7c
 8003114:	46bd      	mov	sp, r7
 8003116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800311a:	bf00      	nop
 800311c:	40011000 	.word	0x40011000
 8003120:	40011400 	.word	0x40011400
 8003124:	51eb851f 	.word	0x51eb851f

08003128 <__errno>:
 8003128:	4b01      	ldr	r3, [pc, #4]	; (8003130 <__errno+0x8>)
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	2000000c 	.word	0x2000000c

08003134 <__libc_init_array>:
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	4d0d      	ldr	r5, [pc, #52]	; (800316c <__libc_init_array+0x38>)
 8003138:	4c0d      	ldr	r4, [pc, #52]	; (8003170 <__libc_init_array+0x3c>)
 800313a:	1b64      	subs	r4, r4, r5
 800313c:	10a4      	asrs	r4, r4, #2
 800313e:	2600      	movs	r6, #0
 8003140:	42a6      	cmp	r6, r4
 8003142:	d109      	bne.n	8003158 <__libc_init_array+0x24>
 8003144:	4d0b      	ldr	r5, [pc, #44]	; (8003174 <__libc_init_array+0x40>)
 8003146:	4c0c      	ldr	r4, [pc, #48]	; (8003178 <__libc_init_array+0x44>)
 8003148:	f001 f850 	bl	80041ec <_init>
 800314c:	1b64      	subs	r4, r4, r5
 800314e:	10a4      	asrs	r4, r4, #2
 8003150:	2600      	movs	r6, #0
 8003152:	42a6      	cmp	r6, r4
 8003154:	d105      	bne.n	8003162 <__libc_init_array+0x2e>
 8003156:	bd70      	pop	{r4, r5, r6, pc}
 8003158:	f855 3b04 	ldr.w	r3, [r5], #4
 800315c:	4798      	blx	r3
 800315e:	3601      	adds	r6, #1
 8003160:	e7ee      	b.n	8003140 <__libc_init_array+0xc>
 8003162:	f855 3b04 	ldr.w	r3, [r5], #4
 8003166:	4798      	blx	r3
 8003168:	3601      	adds	r6, #1
 800316a:	e7f2      	b.n	8003152 <__libc_init_array+0x1e>
 800316c:	08004370 	.word	0x08004370
 8003170:	08004370 	.word	0x08004370
 8003174:	08004370 	.word	0x08004370
 8003178:	08004374 	.word	0x08004374

0800317c <malloc>:
 800317c:	4b02      	ldr	r3, [pc, #8]	; (8003188 <malloc+0xc>)
 800317e:	4601      	mov	r1, r0
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	f000 b85b 	b.w	800323c <_malloc_r>
 8003186:	bf00      	nop
 8003188:	2000000c 	.word	0x2000000c

0800318c <memset>:
 800318c:	4402      	add	r2, r0
 800318e:	4603      	mov	r3, r0
 8003190:	4293      	cmp	r3, r2
 8003192:	d100      	bne.n	8003196 <memset+0xa>
 8003194:	4770      	bx	lr
 8003196:	f803 1b01 	strb.w	r1, [r3], #1
 800319a:	e7f9      	b.n	8003190 <memset+0x4>

0800319c <_free_r>:
 800319c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800319e:	2900      	cmp	r1, #0
 80031a0:	d048      	beq.n	8003234 <_free_r+0x98>
 80031a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031a6:	9001      	str	r0, [sp, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f1a1 0404 	sub.w	r4, r1, #4
 80031ae:	bfb8      	it	lt
 80031b0:	18e4      	addlt	r4, r4, r3
 80031b2:	f000 f94b 	bl	800344c <__malloc_lock>
 80031b6:	4a20      	ldr	r2, [pc, #128]	; (8003238 <_free_r+0x9c>)
 80031b8:	9801      	ldr	r0, [sp, #4]
 80031ba:	6813      	ldr	r3, [r2, #0]
 80031bc:	4615      	mov	r5, r2
 80031be:	b933      	cbnz	r3, 80031ce <_free_r+0x32>
 80031c0:	6063      	str	r3, [r4, #4]
 80031c2:	6014      	str	r4, [r2, #0]
 80031c4:	b003      	add	sp, #12
 80031c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80031ca:	f000 b945 	b.w	8003458 <__malloc_unlock>
 80031ce:	42a3      	cmp	r3, r4
 80031d0:	d90b      	bls.n	80031ea <_free_r+0x4e>
 80031d2:	6821      	ldr	r1, [r4, #0]
 80031d4:	1862      	adds	r2, r4, r1
 80031d6:	4293      	cmp	r3, r2
 80031d8:	bf04      	itt	eq
 80031da:	681a      	ldreq	r2, [r3, #0]
 80031dc:	685b      	ldreq	r3, [r3, #4]
 80031de:	6063      	str	r3, [r4, #4]
 80031e0:	bf04      	itt	eq
 80031e2:	1852      	addeq	r2, r2, r1
 80031e4:	6022      	streq	r2, [r4, #0]
 80031e6:	602c      	str	r4, [r5, #0]
 80031e8:	e7ec      	b.n	80031c4 <_free_r+0x28>
 80031ea:	461a      	mov	r2, r3
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	b10b      	cbz	r3, 80031f4 <_free_r+0x58>
 80031f0:	42a3      	cmp	r3, r4
 80031f2:	d9fa      	bls.n	80031ea <_free_r+0x4e>
 80031f4:	6811      	ldr	r1, [r2, #0]
 80031f6:	1855      	adds	r5, r2, r1
 80031f8:	42a5      	cmp	r5, r4
 80031fa:	d10b      	bne.n	8003214 <_free_r+0x78>
 80031fc:	6824      	ldr	r4, [r4, #0]
 80031fe:	4421      	add	r1, r4
 8003200:	1854      	adds	r4, r2, r1
 8003202:	42a3      	cmp	r3, r4
 8003204:	6011      	str	r1, [r2, #0]
 8003206:	d1dd      	bne.n	80031c4 <_free_r+0x28>
 8003208:	681c      	ldr	r4, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	6053      	str	r3, [r2, #4]
 800320e:	4421      	add	r1, r4
 8003210:	6011      	str	r1, [r2, #0]
 8003212:	e7d7      	b.n	80031c4 <_free_r+0x28>
 8003214:	d902      	bls.n	800321c <_free_r+0x80>
 8003216:	230c      	movs	r3, #12
 8003218:	6003      	str	r3, [r0, #0]
 800321a:	e7d3      	b.n	80031c4 <_free_r+0x28>
 800321c:	6825      	ldr	r5, [r4, #0]
 800321e:	1961      	adds	r1, r4, r5
 8003220:	428b      	cmp	r3, r1
 8003222:	bf04      	itt	eq
 8003224:	6819      	ldreq	r1, [r3, #0]
 8003226:	685b      	ldreq	r3, [r3, #4]
 8003228:	6063      	str	r3, [r4, #4]
 800322a:	bf04      	itt	eq
 800322c:	1949      	addeq	r1, r1, r5
 800322e:	6021      	streq	r1, [r4, #0]
 8003230:	6054      	str	r4, [r2, #4]
 8003232:	e7c7      	b.n	80031c4 <_free_r+0x28>
 8003234:	b003      	add	sp, #12
 8003236:	bd30      	pop	{r4, r5, pc}
 8003238:	20000090 	.word	0x20000090

0800323c <_malloc_r>:
 800323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323e:	1ccd      	adds	r5, r1, #3
 8003240:	f025 0503 	bic.w	r5, r5, #3
 8003244:	3508      	adds	r5, #8
 8003246:	2d0c      	cmp	r5, #12
 8003248:	bf38      	it	cc
 800324a:	250c      	movcc	r5, #12
 800324c:	2d00      	cmp	r5, #0
 800324e:	4606      	mov	r6, r0
 8003250:	db01      	blt.n	8003256 <_malloc_r+0x1a>
 8003252:	42a9      	cmp	r1, r5
 8003254:	d903      	bls.n	800325e <_malloc_r+0x22>
 8003256:	230c      	movs	r3, #12
 8003258:	6033      	str	r3, [r6, #0]
 800325a:	2000      	movs	r0, #0
 800325c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800325e:	f000 f8f5 	bl	800344c <__malloc_lock>
 8003262:	4921      	ldr	r1, [pc, #132]	; (80032e8 <_malloc_r+0xac>)
 8003264:	680a      	ldr	r2, [r1, #0]
 8003266:	4614      	mov	r4, r2
 8003268:	b99c      	cbnz	r4, 8003292 <_malloc_r+0x56>
 800326a:	4f20      	ldr	r7, [pc, #128]	; (80032ec <_malloc_r+0xb0>)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	b923      	cbnz	r3, 800327a <_malloc_r+0x3e>
 8003270:	4621      	mov	r1, r4
 8003272:	4630      	mov	r0, r6
 8003274:	f000 f8aa 	bl	80033cc <_sbrk_r>
 8003278:	6038      	str	r0, [r7, #0]
 800327a:	4629      	mov	r1, r5
 800327c:	4630      	mov	r0, r6
 800327e:	f000 f8a5 	bl	80033cc <_sbrk_r>
 8003282:	1c43      	adds	r3, r0, #1
 8003284:	d123      	bne.n	80032ce <_malloc_r+0x92>
 8003286:	230c      	movs	r3, #12
 8003288:	6033      	str	r3, [r6, #0]
 800328a:	4630      	mov	r0, r6
 800328c:	f000 f8e4 	bl	8003458 <__malloc_unlock>
 8003290:	e7e3      	b.n	800325a <_malloc_r+0x1e>
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	1b5b      	subs	r3, r3, r5
 8003296:	d417      	bmi.n	80032c8 <_malloc_r+0x8c>
 8003298:	2b0b      	cmp	r3, #11
 800329a:	d903      	bls.n	80032a4 <_malloc_r+0x68>
 800329c:	6023      	str	r3, [r4, #0]
 800329e:	441c      	add	r4, r3
 80032a0:	6025      	str	r5, [r4, #0]
 80032a2:	e004      	b.n	80032ae <_malloc_r+0x72>
 80032a4:	6863      	ldr	r3, [r4, #4]
 80032a6:	42a2      	cmp	r2, r4
 80032a8:	bf0c      	ite	eq
 80032aa:	600b      	streq	r3, [r1, #0]
 80032ac:	6053      	strne	r3, [r2, #4]
 80032ae:	4630      	mov	r0, r6
 80032b0:	f000 f8d2 	bl	8003458 <__malloc_unlock>
 80032b4:	f104 000b 	add.w	r0, r4, #11
 80032b8:	1d23      	adds	r3, r4, #4
 80032ba:	f020 0007 	bic.w	r0, r0, #7
 80032be:	1ac2      	subs	r2, r0, r3
 80032c0:	d0cc      	beq.n	800325c <_malloc_r+0x20>
 80032c2:	1a1b      	subs	r3, r3, r0
 80032c4:	50a3      	str	r3, [r4, r2]
 80032c6:	e7c9      	b.n	800325c <_malloc_r+0x20>
 80032c8:	4622      	mov	r2, r4
 80032ca:	6864      	ldr	r4, [r4, #4]
 80032cc:	e7cc      	b.n	8003268 <_malloc_r+0x2c>
 80032ce:	1cc4      	adds	r4, r0, #3
 80032d0:	f024 0403 	bic.w	r4, r4, #3
 80032d4:	42a0      	cmp	r0, r4
 80032d6:	d0e3      	beq.n	80032a0 <_malloc_r+0x64>
 80032d8:	1a21      	subs	r1, r4, r0
 80032da:	4630      	mov	r0, r6
 80032dc:	f000 f876 	bl	80033cc <_sbrk_r>
 80032e0:	3001      	adds	r0, #1
 80032e2:	d1dd      	bne.n	80032a0 <_malloc_r+0x64>
 80032e4:	e7cf      	b.n	8003286 <_malloc_r+0x4a>
 80032e6:	bf00      	nop
 80032e8:	20000090 	.word	0x20000090
 80032ec:	20000094 	.word	0x20000094

080032f0 <srand>:
 80032f0:	b538      	push	{r3, r4, r5, lr}
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <srand+0x44>)
 80032f4:	681d      	ldr	r5, [r3, #0]
 80032f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80032f8:	4604      	mov	r4, r0
 80032fa:	b9b3      	cbnz	r3, 800332a <srand+0x3a>
 80032fc:	2018      	movs	r0, #24
 80032fe:	f7ff ff3d 	bl	800317c <malloc>
 8003302:	4602      	mov	r2, r0
 8003304:	63a8      	str	r0, [r5, #56]	; 0x38
 8003306:	b920      	cbnz	r0, 8003312 <srand+0x22>
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <srand+0x48>)
 800330a:	480c      	ldr	r0, [pc, #48]	; (800333c <srand+0x4c>)
 800330c:	2142      	movs	r1, #66	; 0x42
 800330e:	f000 f86d 	bl	80033ec <__assert_func>
 8003312:	490b      	ldr	r1, [pc, #44]	; (8003340 <srand+0x50>)
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <srand+0x54>)
 8003316:	e9c0 1300 	strd	r1, r3, [r0]
 800331a:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <srand+0x58>)
 800331c:	6083      	str	r3, [r0, #8]
 800331e:	230b      	movs	r3, #11
 8003320:	8183      	strh	r3, [r0, #12]
 8003322:	2100      	movs	r1, #0
 8003324:	2001      	movs	r0, #1
 8003326:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800332a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800332c:	2200      	movs	r2, #0
 800332e:	611c      	str	r4, [r3, #16]
 8003330:	615a      	str	r2, [r3, #20]
 8003332:	bd38      	pop	{r3, r4, r5, pc}
 8003334:	2000000c 	.word	0x2000000c
 8003338:	08004220 	.word	0x08004220
 800333c:	08004237 	.word	0x08004237
 8003340:	abcd330e 	.word	0xabcd330e
 8003344:	e66d1234 	.word	0xe66d1234
 8003348:	0005deec 	.word	0x0005deec

0800334c <rand>:
 800334c:	4b17      	ldr	r3, [pc, #92]	; (80033ac <rand+0x60>)
 800334e:	b510      	push	{r4, lr}
 8003350:	681c      	ldr	r4, [r3, #0]
 8003352:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003354:	b9b3      	cbnz	r3, 8003384 <rand+0x38>
 8003356:	2018      	movs	r0, #24
 8003358:	f7ff ff10 	bl	800317c <malloc>
 800335c:	63a0      	str	r0, [r4, #56]	; 0x38
 800335e:	b928      	cbnz	r0, 800336c <rand+0x20>
 8003360:	4602      	mov	r2, r0
 8003362:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <rand+0x64>)
 8003364:	4813      	ldr	r0, [pc, #76]	; (80033b4 <rand+0x68>)
 8003366:	214e      	movs	r1, #78	; 0x4e
 8003368:	f000 f840 	bl	80033ec <__assert_func>
 800336c:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <rand+0x6c>)
 800336e:	4b13      	ldr	r3, [pc, #76]	; (80033bc <rand+0x70>)
 8003370:	e9c0 2300 	strd	r2, r3, [r0]
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <rand+0x74>)
 8003376:	6083      	str	r3, [r0, #8]
 8003378:	230b      	movs	r3, #11
 800337a:	8183      	strh	r3, [r0, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	2300      	movs	r3, #0
 8003380:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003384:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003386:	480f      	ldr	r0, [pc, #60]	; (80033c4 <rand+0x78>)
 8003388:	690a      	ldr	r2, [r1, #16]
 800338a:	694b      	ldr	r3, [r1, #20]
 800338c:	4c0e      	ldr	r4, [pc, #56]	; (80033c8 <rand+0x7c>)
 800338e:	4350      	muls	r0, r2
 8003390:	fb04 0003 	mla	r0, r4, r3, r0
 8003394:	fba2 3404 	umull	r3, r4, r2, r4
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	4404      	add	r4, r0
 800339c:	f144 0000 	adc.w	r0, r4, #0
 80033a0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80033a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80033a8:	bd10      	pop	{r4, pc}
 80033aa:	bf00      	nop
 80033ac:	2000000c 	.word	0x2000000c
 80033b0:	08004220 	.word	0x08004220
 80033b4:	08004237 	.word	0x08004237
 80033b8:	abcd330e 	.word	0xabcd330e
 80033bc:	e66d1234 	.word	0xe66d1234
 80033c0:	0005deec 	.word	0x0005deec
 80033c4:	5851f42d 	.word	0x5851f42d
 80033c8:	4c957f2d 	.word	0x4c957f2d

080033cc <_sbrk_r>:
 80033cc:	b538      	push	{r3, r4, r5, lr}
 80033ce:	4d06      	ldr	r5, [pc, #24]	; (80033e8 <_sbrk_r+0x1c>)
 80033d0:	2300      	movs	r3, #0
 80033d2:	4604      	mov	r4, r0
 80033d4:	4608      	mov	r0, r1
 80033d6:	602b      	str	r3, [r5, #0]
 80033d8:	f7fe fa00 	bl	80017dc <_sbrk>
 80033dc:	1c43      	adds	r3, r0, #1
 80033de:	d102      	bne.n	80033e6 <_sbrk_r+0x1a>
 80033e0:	682b      	ldr	r3, [r5, #0]
 80033e2:	b103      	cbz	r3, 80033e6 <_sbrk_r+0x1a>
 80033e4:	6023      	str	r3, [r4, #0]
 80033e6:	bd38      	pop	{r3, r4, r5, pc}
 80033e8:	2000013c 	.word	0x2000013c

080033ec <__assert_func>:
 80033ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80033ee:	4614      	mov	r4, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <__assert_func+0x2c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4605      	mov	r5, r0
 80033f8:	68d8      	ldr	r0, [r3, #12]
 80033fa:	b14c      	cbz	r4, 8003410 <__assert_func+0x24>
 80033fc:	4b07      	ldr	r3, [pc, #28]	; (800341c <__assert_func+0x30>)
 80033fe:	9100      	str	r1, [sp, #0]
 8003400:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003404:	4906      	ldr	r1, [pc, #24]	; (8003420 <__assert_func+0x34>)
 8003406:	462b      	mov	r3, r5
 8003408:	f000 f80e 	bl	8003428 <fiprintf>
 800340c:	f000 fbd8 	bl	8003bc0 <abort>
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <__assert_func+0x38>)
 8003412:	461c      	mov	r4, r3
 8003414:	e7f3      	b.n	80033fe <__assert_func+0x12>
 8003416:	bf00      	nop
 8003418:	2000000c 	.word	0x2000000c
 800341c:	08004296 	.word	0x08004296
 8003420:	080042a3 	.word	0x080042a3
 8003424:	080042d1 	.word	0x080042d1

08003428 <fiprintf>:
 8003428:	b40e      	push	{r1, r2, r3}
 800342a:	b503      	push	{r0, r1, lr}
 800342c:	4601      	mov	r1, r0
 800342e:	ab03      	add	r3, sp, #12
 8003430:	4805      	ldr	r0, [pc, #20]	; (8003448 <fiprintf+0x20>)
 8003432:	f853 2b04 	ldr.w	r2, [r3], #4
 8003436:	6800      	ldr	r0, [r0, #0]
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	f000 f83d 	bl	80034b8 <_vfiprintf_r>
 800343e:	b002      	add	sp, #8
 8003440:	f85d eb04 	ldr.w	lr, [sp], #4
 8003444:	b003      	add	sp, #12
 8003446:	4770      	bx	lr
 8003448:	2000000c 	.word	0x2000000c

0800344c <__malloc_lock>:
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <__malloc_lock+0x8>)
 800344e:	f000 bd77 	b.w	8003f40 <__retarget_lock_acquire_recursive>
 8003452:	bf00      	nop
 8003454:	20000144 	.word	0x20000144

08003458 <__malloc_unlock>:
 8003458:	4801      	ldr	r0, [pc, #4]	; (8003460 <__malloc_unlock+0x8>)
 800345a:	f000 bd72 	b.w	8003f42 <__retarget_lock_release_recursive>
 800345e:	bf00      	nop
 8003460:	20000144 	.word	0x20000144

08003464 <__sfputc_r>:
 8003464:	6893      	ldr	r3, [r2, #8]
 8003466:	3b01      	subs	r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	b410      	push	{r4}
 800346c:	6093      	str	r3, [r2, #8]
 800346e:	da08      	bge.n	8003482 <__sfputc_r+0x1e>
 8003470:	6994      	ldr	r4, [r2, #24]
 8003472:	42a3      	cmp	r3, r4
 8003474:	db01      	blt.n	800347a <__sfputc_r+0x16>
 8003476:	290a      	cmp	r1, #10
 8003478:	d103      	bne.n	8003482 <__sfputc_r+0x1e>
 800347a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800347e:	f000 badf 	b.w	8003a40 <__swbuf_r>
 8003482:	6813      	ldr	r3, [r2, #0]
 8003484:	1c58      	adds	r0, r3, #1
 8003486:	6010      	str	r0, [r2, #0]
 8003488:	7019      	strb	r1, [r3, #0]
 800348a:	4608      	mov	r0, r1
 800348c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003490:	4770      	bx	lr

08003492 <__sfputs_r>:
 8003492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003494:	4606      	mov	r6, r0
 8003496:	460f      	mov	r7, r1
 8003498:	4614      	mov	r4, r2
 800349a:	18d5      	adds	r5, r2, r3
 800349c:	42ac      	cmp	r4, r5
 800349e:	d101      	bne.n	80034a4 <__sfputs_r+0x12>
 80034a0:	2000      	movs	r0, #0
 80034a2:	e007      	b.n	80034b4 <__sfputs_r+0x22>
 80034a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034a8:	463a      	mov	r2, r7
 80034aa:	4630      	mov	r0, r6
 80034ac:	f7ff ffda 	bl	8003464 <__sfputc_r>
 80034b0:	1c43      	adds	r3, r0, #1
 80034b2:	d1f3      	bne.n	800349c <__sfputs_r+0xa>
 80034b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034b8 <_vfiprintf_r>:
 80034b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034bc:	460d      	mov	r5, r1
 80034be:	b09d      	sub	sp, #116	; 0x74
 80034c0:	4614      	mov	r4, r2
 80034c2:	4698      	mov	r8, r3
 80034c4:	4606      	mov	r6, r0
 80034c6:	b118      	cbz	r0, 80034d0 <_vfiprintf_r+0x18>
 80034c8:	6983      	ldr	r3, [r0, #24]
 80034ca:	b90b      	cbnz	r3, 80034d0 <_vfiprintf_r+0x18>
 80034cc:	f000 fc9a 	bl	8003e04 <__sinit>
 80034d0:	4b89      	ldr	r3, [pc, #548]	; (80036f8 <_vfiprintf_r+0x240>)
 80034d2:	429d      	cmp	r5, r3
 80034d4:	d11b      	bne.n	800350e <_vfiprintf_r+0x56>
 80034d6:	6875      	ldr	r5, [r6, #4]
 80034d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034da:	07d9      	lsls	r1, r3, #31
 80034dc:	d405      	bmi.n	80034ea <_vfiprintf_r+0x32>
 80034de:	89ab      	ldrh	r3, [r5, #12]
 80034e0:	059a      	lsls	r2, r3, #22
 80034e2:	d402      	bmi.n	80034ea <_vfiprintf_r+0x32>
 80034e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034e6:	f000 fd2b 	bl	8003f40 <__retarget_lock_acquire_recursive>
 80034ea:	89ab      	ldrh	r3, [r5, #12]
 80034ec:	071b      	lsls	r3, r3, #28
 80034ee:	d501      	bpl.n	80034f4 <_vfiprintf_r+0x3c>
 80034f0:	692b      	ldr	r3, [r5, #16]
 80034f2:	b9eb      	cbnz	r3, 8003530 <_vfiprintf_r+0x78>
 80034f4:	4629      	mov	r1, r5
 80034f6:	4630      	mov	r0, r6
 80034f8:	f000 faf4 	bl	8003ae4 <__swsetup_r>
 80034fc:	b1c0      	cbz	r0, 8003530 <_vfiprintf_r+0x78>
 80034fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003500:	07dc      	lsls	r4, r3, #31
 8003502:	d50e      	bpl.n	8003522 <_vfiprintf_r+0x6a>
 8003504:	f04f 30ff 	mov.w	r0, #4294967295
 8003508:	b01d      	add	sp, #116	; 0x74
 800350a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800350e:	4b7b      	ldr	r3, [pc, #492]	; (80036fc <_vfiprintf_r+0x244>)
 8003510:	429d      	cmp	r5, r3
 8003512:	d101      	bne.n	8003518 <_vfiprintf_r+0x60>
 8003514:	68b5      	ldr	r5, [r6, #8]
 8003516:	e7df      	b.n	80034d8 <_vfiprintf_r+0x20>
 8003518:	4b79      	ldr	r3, [pc, #484]	; (8003700 <_vfiprintf_r+0x248>)
 800351a:	429d      	cmp	r5, r3
 800351c:	bf08      	it	eq
 800351e:	68f5      	ldreq	r5, [r6, #12]
 8003520:	e7da      	b.n	80034d8 <_vfiprintf_r+0x20>
 8003522:	89ab      	ldrh	r3, [r5, #12]
 8003524:	0598      	lsls	r0, r3, #22
 8003526:	d4ed      	bmi.n	8003504 <_vfiprintf_r+0x4c>
 8003528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800352a:	f000 fd0a 	bl	8003f42 <__retarget_lock_release_recursive>
 800352e:	e7e9      	b.n	8003504 <_vfiprintf_r+0x4c>
 8003530:	2300      	movs	r3, #0
 8003532:	9309      	str	r3, [sp, #36]	; 0x24
 8003534:	2320      	movs	r3, #32
 8003536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800353a:	f8cd 800c 	str.w	r8, [sp, #12]
 800353e:	2330      	movs	r3, #48	; 0x30
 8003540:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003704 <_vfiprintf_r+0x24c>
 8003544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003548:	f04f 0901 	mov.w	r9, #1
 800354c:	4623      	mov	r3, r4
 800354e:	469a      	mov	sl, r3
 8003550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003554:	b10a      	cbz	r2, 800355a <_vfiprintf_r+0xa2>
 8003556:	2a25      	cmp	r2, #37	; 0x25
 8003558:	d1f9      	bne.n	800354e <_vfiprintf_r+0x96>
 800355a:	ebba 0b04 	subs.w	fp, sl, r4
 800355e:	d00b      	beq.n	8003578 <_vfiprintf_r+0xc0>
 8003560:	465b      	mov	r3, fp
 8003562:	4622      	mov	r2, r4
 8003564:	4629      	mov	r1, r5
 8003566:	4630      	mov	r0, r6
 8003568:	f7ff ff93 	bl	8003492 <__sfputs_r>
 800356c:	3001      	adds	r0, #1
 800356e:	f000 80aa 	beq.w	80036c6 <_vfiprintf_r+0x20e>
 8003572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003574:	445a      	add	r2, fp
 8003576:	9209      	str	r2, [sp, #36]	; 0x24
 8003578:	f89a 3000 	ldrb.w	r3, [sl]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80a2 	beq.w	80036c6 <_vfiprintf_r+0x20e>
 8003582:	2300      	movs	r3, #0
 8003584:	f04f 32ff 	mov.w	r2, #4294967295
 8003588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800358c:	f10a 0a01 	add.w	sl, sl, #1
 8003590:	9304      	str	r3, [sp, #16]
 8003592:	9307      	str	r3, [sp, #28]
 8003594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003598:	931a      	str	r3, [sp, #104]	; 0x68
 800359a:	4654      	mov	r4, sl
 800359c:	2205      	movs	r2, #5
 800359e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035a2:	4858      	ldr	r0, [pc, #352]	; (8003704 <_vfiprintf_r+0x24c>)
 80035a4:	f7fc fe1c 	bl	80001e0 <memchr>
 80035a8:	9a04      	ldr	r2, [sp, #16]
 80035aa:	b9d8      	cbnz	r0, 80035e4 <_vfiprintf_r+0x12c>
 80035ac:	06d1      	lsls	r1, r2, #27
 80035ae:	bf44      	itt	mi
 80035b0:	2320      	movmi	r3, #32
 80035b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035b6:	0713      	lsls	r3, r2, #28
 80035b8:	bf44      	itt	mi
 80035ba:	232b      	movmi	r3, #43	; 0x2b
 80035bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035c0:	f89a 3000 	ldrb.w	r3, [sl]
 80035c4:	2b2a      	cmp	r3, #42	; 0x2a
 80035c6:	d015      	beq.n	80035f4 <_vfiprintf_r+0x13c>
 80035c8:	9a07      	ldr	r2, [sp, #28]
 80035ca:	4654      	mov	r4, sl
 80035cc:	2000      	movs	r0, #0
 80035ce:	f04f 0c0a 	mov.w	ip, #10
 80035d2:	4621      	mov	r1, r4
 80035d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035d8:	3b30      	subs	r3, #48	; 0x30
 80035da:	2b09      	cmp	r3, #9
 80035dc:	d94e      	bls.n	800367c <_vfiprintf_r+0x1c4>
 80035de:	b1b0      	cbz	r0, 800360e <_vfiprintf_r+0x156>
 80035e0:	9207      	str	r2, [sp, #28]
 80035e2:	e014      	b.n	800360e <_vfiprintf_r+0x156>
 80035e4:	eba0 0308 	sub.w	r3, r0, r8
 80035e8:	fa09 f303 	lsl.w	r3, r9, r3
 80035ec:	4313      	orrs	r3, r2
 80035ee:	9304      	str	r3, [sp, #16]
 80035f0:	46a2      	mov	sl, r4
 80035f2:	e7d2      	b.n	800359a <_vfiprintf_r+0xe2>
 80035f4:	9b03      	ldr	r3, [sp, #12]
 80035f6:	1d19      	adds	r1, r3, #4
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	9103      	str	r1, [sp, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bfbb      	ittet	lt
 8003600:	425b      	neglt	r3, r3
 8003602:	f042 0202 	orrlt.w	r2, r2, #2
 8003606:	9307      	strge	r3, [sp, #28]
 8003608:	9307      	strlt	r3, [sp, #28]
 800360a:	bfb8      	it	lt
 800360c:	9204      	strlt	r2, [sp, #16]
 800360e:	7823      	ldrb	r3, [r4, #0]
 8003610:	2b2e      	cmp	r3, #46	; 0x2e
 8003612:	d10c      	bne.n	800362e <_vfiprintf_r+0x176>
 8003614:	7863      	ldrb	r3, [r4, #1]
 8003616:	2b2a      	cmp	r3, #42	; 0x2a
 8003618:	d135      	bne.n	8003686 <_vfiprintf_r+0x1ce>
 800361a:	9b03      	ldr	r3, [sp, #12]
 800361c:	1d1a      	adds	r2, r3, #4
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	9203      	str	r2, [sp, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	bfb8      	it	lt
 8003626:	f04f 33ff 	movlt.w	r3, #4294967295
 800362a:	3402      	adds	r4, #2
 800362c:	9305      	str	r3, [sp, #20]
 800362e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003714 <_vfiprintf_r+0x25c>
 8003632:	7821      	ldrb	r1, [r4, #0]
 8003634:	2203      	movs	r2, #3
 8003636:	4650      	mov	r0, sl
 8003638:	f7fc fdd2 	bl	80001e0 <memchr>
 800363c:	b140      	cbz	r0, 8003650 <_vfiprintf_r+0x198>
 800363e:	2340      	movs	r3, #64	; 0x40
 8003640:	eba0 000a 	sub.w	r0, r0, sl
 8003644:	fa03 f000 	lsl.w	r0, r3, r0
 8003648:	9b04      	ldr	r3, [sp, #16]
 800364a:	4303      	orrs	r3, r0
 800364c:	3401      	adds	r4, #1
 800364e:	9304      	str	r3, [sp, #16]
 8003650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003654:	482c      	ldr	r0, [pc, #176]	; (8003708 <_vfiprintf_r+0x250>)
 8003656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800365a:	2206      	movs	r2, #6
 800365c:	f7fc fdc0 	bl	80001e0 <memchr>
 8003660:	2800      	cmp	r0, #0
 8003662:	d03f      	beq.n	80036e4 <_vfiprintf_r+0x22c>
 8003664:	4b29      	ldr	r3, [pc, #164]	; (800370c <_vfiprintf_r+0x254>)
 8003666:	bb1b      	cbnz	r3, 80036b0 <_vfiprintf_r+0x1f8>
 8003668:	9b03      	ldr	r3, [sp, #12]
 800366a:	3307      	adds	r3, #7
 800366c:	f023 0307 	bic.w	r3, r3, #7
 8003670:	3308      	adds	r3, #8
 8003672:	9303      	str	r3, [sp, #12]
 8003674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003676:	443b      	add	r3, r7
 8003678:	9309      	str	r3, [sp, #36]	; 0x24
 800367a:	e767      	b.n	800354c <_vfiprintf_r+0x94>
 800367c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003680:	460c      	mov	r4, r1
 8003682:	2001      	movs	r0, #1
 8003684:	e7a5      	b.n	80035d2 <_vfiprintf_r+0x11a>
 8003686:	2300      	movs	r3, #0
 8003688:	3401      	adds	r4, #1
 800368a:	9305      	str	r3, [sp, #20]
 800368c:	4619      	mov	r1, r3
 800368e:	f04f 0c0a 	mov.w	ip, #10
 8003692:	4620      	mov	r0, r4
 8003694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003698:	3a30      	subs	r2, #48	; 0x30
 800369a:	2a09      	cmp	r2, #9
 800369c:	d903      	bls.n	80036a6 <_vfiprintf_r+0x1ee>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0c5      	beq.n	800362e <_vfiprintf_r+0x176>
 80036a2:	9105      	str	r1, [sp, #20]
 80036a4:	e7c3      	b.n	800362e <_vfiprintf_r+0x176>
 80036a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80036aa:	4604      	mov	r4, r0
 80036ac:	2301      	movs	r3, #1
 80036ae:	e7f0      	b.n	8003692 <_vfiprintf_r+0x1da>
 80036b0:	ab03      	add	r3, sp, #12
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	462a      	mov	r2, r5
 80036b6:	4b16      	ldr	r3, [pc, #88]	; (8003710 <_vfiprintf_r+0x258>)
 80036b8:	a904      	add	r1, sp, #16
 80036ba:	4630      	mov	r0, r6
 80036bc:	f3af 8000 	nop.w
 80036c0:	4607      	mov	r7, r0
 80036c2:	1c78      	adds	r0, r7, #1
 80036c4:	d1d6      	bne.n	8003674 <_vfiprintf_r+0x1bc>
 80036c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036c8:	07d9      	lsls	r1, r3, #31
 80036ca:	d405      	bmi.n	80036d8 <_vfiprintf_r+0x220>
 80036cc:	89ab      	ldrh	r3, [r5, #12]
 80036ce:	059a      	lsls	r2, r3, #22
 80036d0:	d402      	bmi.n	80036d8 <_vfiprintf_r+0x220>
 80036d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036d4:	f000 fc35 	bl	8003f42 <__retarget_lock_release_recursive>
 80036d8:	89ab      	ldrh	r3, [r5, #12]
 80036da:	065b      	lsls	r3, r3, #25
 80036dc:	f53f af12 	bmi.w	8003504 <_vfiprintf_r+0x4c>
 80036e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036e2:	e711      	b.n	8003508 <_vfiprintf_r+0x50>
 80036e4:	ab03      	add	r3, sp, #12
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	462a      	mov	r2, r5
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <_vfiprintf_r+0x258>)
 80036ec:	a904      	add	r1, sp, #16
 80036ee:	4630      	mov	r0, r6
 80036f0:	f000 f880 	bl	80037f4 <_printf_i>
 80036f4:	e7e4      	b.n	80036c0 <_vfiprintf_r+0x208>
 80036f6:	bf00      	nop
 80036f8:	08004328 	.word	0x08004328
 80036fc:	08004348 	.word	0x08004348
 8003700:	08004308 	.word	0x08004308
 8003704:	080042d2 	.word	0x080042d2
 8003708:	080042dc 	.word	0x080042dc
 800370c:	00000000 	.word	0x00000000
 8003710:	08003493 	.word	0x08003493
 8003714:	080042d8 	.word	0x080042d8

08003718 <_printf_common>:
 8003718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800371c:	4616      	mov	r6, r2
 800371e:	4699      	mov	r9, r3
 8003720:	688a      	ldr	r2, [r1, #8]
 8003722:	690b      	ldr	r3, [r1, #16]
 8003724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003728:	4293      	cmp	r3, r2
 800372a:	bfb8      	it	lt
 800372c:	4613      	movlt	r3, r2
 800372e:	6033      	str	r3, [r6, #0]
 8003730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003734:	4607      	mov	r7, r0
 8003736:	460c      	mov	r4, r1
 8003738:	b10a      	cbz	r2, 800373e <_printf_common+0x26>
 800373a:	3301      	adds	r3, #1
 800373c:	6033      	str	r3, [r6, #0]
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	0699      	lsls	r1, r3, #26
 8003742:	bf42      	ittt	mi
 8003744:	6833      	ldrmi	r3, [r6, #0]
 8003746:	3302      	addmi	r3, #2
 8003748:	6033      	strmi	r3, [r6, #0]
 800374a:	6825      	ldr	r5, [r4, #0]
 800374c:	f015 0506 	ands.w	r5, r5, #6
 8003750:	d106      	bne.n	8003760 <_printf_common+0x48>
 8003752:	f104 0a19 	add.w	sl, r4, #25
 8003756:	68e3      	ldr	r3, [r4, #12]
 8003758:	6832      	ldr	r2, [r6, #0]
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	42ab      	cmp	r3, r5
 800375e:	dc26      	bgt.n	80037ae <_printf_common+0x96>
 8003760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003764:	1e13      	subs	r3, r2, #0
 8003766:	6822      	ldr	r2, [r4, #0]
 8003768:	bf18      	it	ne
 800376a:	2301      	movne	r3, #1
 800376c:	0692      	lsls	r2, r2, #26
 800376e:	d42b      	bmi.n	80037c8 <_printf_common+0xb0>
 8003770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003774:	4649      	mov	r1, r9
 8003776:	4638      	mov	r0, r7
 8003778:	47c0      	blx	r8
 800377a:	3001      	adds	r0, #1
 800377c:	d01e      	beq.n	80037bc <_printf_common+0xa4>
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	68e5      	ldr	r5, [r4, #12]
 8003782:	6832      	ldr	r2, [r6, #0]
 8003784:	f003 0306 	and.w	r3, r3, #6
 8003788:	2b04      	cmp	r3, #4
 800378a:	bf08      	it	eq
 800378c:	1aad      	subeq	r5, r5, r2
 800378e:	68a3      	ldr	r3, [r4, #8]
 8003790:	6922      	ldr	r2, [r4, #16]
 8003792:	bf0c      	ite	eq
 8003794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003798:	2500      	movne	r5, #0
 800379a:	4293      	cmp	r3, r2
 800379c:	bfc4      	itt	gt
 800379e:	1a9b      	subgt	r3, r3, r2
 80037a0:	18ed      	addgt	r5, r5, r3
 80037a2:	2600      	movs	r6, #0
 80037a4:	341a      	adds	r4, #26
 80037a6:	42b5      	cmp	r5, r6
 80037a8:	d11a      	bne.n	80037e0 <_printf_common+0xc8>
 80037aa:	2000      	movs	r0, #0
 80037ac:	e008      	b.n	80037c0 <_printf_common+0xa8>
 80037ae:	2301      	movs	r3, #1
 80037b0:	4652      	mov	r2, sl
 80037b2:	4649      	mov	r1, r9
 80037b4:	4638      	mov	r0, r7
 80037b6:	47c0      	blx	r8
 80037b8:	3001      	adds	r0, #1
 80037ba:	d103      	bne.n	80037c4 <_printf_common+0xac>
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c4:	3501      	adds	r5, #1
 80037c6:	e7c6      	b.n	8003756 <_printf_common+0x3e>
 80037c8:	18e1      	adds	r1, r4, r3
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	2030      	movs	r0, #48	; 0x30
 80037ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037d2:	4422      	add	r2, r4
 80037d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037dc:	3302      	adds	r3, #2
 80037de:	e7c7      	b.n	8003770 <_printf_common+0x58>
 80037e0:	2301      	movs	r3, #1
 80037e2:	4622      	mov	r2, r4
 80037e4:	4649      	mov	r1, r9
 80037e6:	4638      	mov	r0, r7
 80037e8:	47c0      	blx	r8
 80037ea:	3001      	adds	r0, #1
 80037ec:	d0e6      	beq.n	80037bc <_printf_common+0xa4>
 80037ee:	3601      	adds	r6, #1
 80037f0:	e7d9      	b.n	80037a6 <_printf_common+0x8e>
	...

080037f4 <_printf_i>:
 80037f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037f8:	460c      	mov	r4, r1
 80037fa:	4691      	mov	r9, r2
 80037fc:	7e27      	ldrb	r7, [r4, #24]
 80037fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003800:	2f78      	cmp	r7, #120	; 0x78
 8003802:	4680      	mov	r8, r0
 8003804:	469a      	mov	sl, r3
 8003806:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800380a:	d807      	bhi.n	800381c <_printf_i+0x28>
 800380c:	2f62      	cmp	r7, #98	; 0x62
 800380e:	d80a      	bhi.n	8003826 <_printf_i+0x32>
 8003810:	2f00      	cmp	r7, #0
 8003812:	f000 80d8 	beq.w	80039c6 <_printf_i+0x1d2>
 8003816:	2f58      	cmp	r7, #88	; 0x58
 8003818:	f000 80a3 	beq.w	8003962 <_printf_i+0x16e>
 800381c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003824:	e03a      	b.n	800389c <_printf_i+0xa8>
 8003826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800382a:	2b15      	cmp	r3, #21
 800382c:	d8f6      	bhi.n	800381c <_printf_i+0x28>
 800382e:	a001      	add	r0, pc, #4	; (adr r0, 8003834 <_printf_i+0x40>)
 8003830:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003834:	0800388d 	.word	0x0800388d
 8003838:	080038a1 	.word	0x080038a1
 800383c:	0800381d 	.word	0x0800381d
 8003840:	0800381d 	.word	0x0800381d
 8003844:	0800381d 	.word	0x0800381d
 8003848:	0800381d 	.word	0x0800381d
 800384c:	080038a1 	.word	0x080038a1
 8003850:	0800381d 	.word	0x0800381d
 8003854:	0800381d 	.word	0x0800381d
 8003858:	0800381d 	.word	0x0800381d
 800385c:	0800381d 	.word	0x0800381d
 8003860:	080039ad 	.word	0x080039ad
 8003864:	080038d1 	.word	0x080038d1
 8003868:	0800398f 	.word	0x0800398f
 800386c:	0800381d 	.word	0x0800381d
 8003870:	0800381d 	.word	0x0800381d
 8003874:	080039cf 	.word	0x080039cf
 8003878:	0800381d 	.word	0x0800381d
 800387c:	080038d1 	.word	0x080038d1
 8003880:	0800381d 	.word	0x0800381d
 8003884:	0800381d 	.word	0x0800381d
 8003888:	08003997 	.word	0x08003997
 800388c:	680b      	ldr	r3, [r1, #0]
 800388e:	1d1a      	adds	r2, r3, #4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	600a      	str	r2, [r1, #0]
 8003894:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800389c:	2301      	movs	r3, #1
 800389e:	e0a3      	b.n	80039e8 <_printf_i+0x1f4>
 80038a0:	6825      	ldr	r5, [r4, #0]
 80038a2:	6808      	ldr	r0, [r1, #0]
 80038a4:	062e      	lsls	r6, r5, #24
 80038a6:	f100 0304 	add.w	r3, r0, #4
 80038aa:	d50a      	bpl.n	80038c2 <_printf_i+0xce>
 80038ac:	6805      	ldr	r5, [r0, #0]
 80038ae:	600b      	str	r3, [r1, #0]
 80038b0:	2d00      	cmp	r5, #0
 80038b2:	da03      	bge.n	80038bc <_printf_i+0xc8>
 80038b4:	232d      	movs	r3, #45	; 0x2d
 80038b6:	426d      	negs	r5, r5
 80038b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038bc:	485e      	ldr	r0, [pc, #376]	; (8003a38 <_printf_i+0x244>)
 80038be:	230a      	movs	r3, #10
 80038c0:	e019      	b.n	80038f6 <_printf_i+0x102>
 80038c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80038c6:	6805      	ldr	r5, [r0, #0]
 80038c8:	600b      	str	r3, [r1, #0]
 80038ca:	bf18      	it	ne
 80038cc:	b22d      	sxthne	r5, r5
 80038ce:	e7ef      	b.n	80038b0 <_printf_i+0xbc>
 80038d0:	680b      	ldr	r3, [r1, #0]
 80038d2:	6825      	ldr	r5, [r4, #0]
 80038d4:	1d18      	adds	r0, r3, #4
 80038d6:	6008      	str	r0, [r1, #0]
 80038d8:	0628      	lsls	r0, r5, #24
 80038da:	d501      	bpl.n	80038e0 <_printf_i+0xec>
 80038dc:	681d      	ldr	r5, [r3, #0]
 80038de:	e002      	b.n	80038e6 <_printf_i+0xf2>
 80038e0:	0669      	lsls	r1, r5, #25
 80038e2:	d5fb      	bpl.n	80038dc <_printf_i+0xe8>
 80038e4:	881d      	ldrh	r5, [r3, #0]
 80038e6:	4854      	ldr	r0, [pc, #336]	; (8003a38 <_printf_i+0x244>)
 80038e8:	2f6f      	cmp	r7, #111	; 0x6f
 80038ea:	bf0c      	ite	eq
 80038ec:	2308      	moveq	r3, #8
 80038ee:	230a      	movne	r3, #10
 80038f0:	2100      	movs	r1, #0
 80038f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038f6:	6866      	ldr	r6, [r4, #4]
 80038f8:	60a6      	str	r6, [r4, #8]
 80038fa:	2e00      	cmp	r6, #0
 80038fc:	bfa2      	ittt	ge
 80038fe:	6821      	ldrge	r1, [r4, #0]
 8003900:	f021 0104 	bicge.w	r1, r1, #4
 8003904:	6021      	strge	r1, [r4, #0]
 8003906:	b90d      	cbnz	r5, 800390c <_printf_i+0x118>
 8003908:	2e00      	cmp	r6, #0
 800390a:	d04d      	beq.n	80039a8 <_printf_i+0x1b4>
 800390c:	4616      	mov	r6, r2
 800390e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003912:	fb03 5711 	mls	r7, r3, r1, r5
 8003916:	5dc7      	ldrb	r7, [r0, r7]
 8003918:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800391c:	462f      	mov	r7, r5
 800391e:	42bb      	cmp	r3, r7
 8003920:	460d      	mov	r5, r1
 8003922:	d9f4      	bls.n	800390e <_printf_i+0x11a>
 8003924:	2b08      	cmp	r3, #8
 8003926:	d10b      	bne.n	8003940 <_printf_i+0x14c>
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	07df      	lsls	r7, r3, #31
 800392c:	d508      	bpl.n	8003940 <_printf_i+0x14c>
 800392e:	6923      	ldr	r3, [r4, #16]
 8003930:	6861      	ldr	r1, [r4, #4]
 8003932:	4299      	cmp	r1, r3
 8003934:	bfde      	ittt	le
 8003936:	2330      	movle	r3, #48	; 0x30
 8003938:	f806 3c01 	strble.w	r3, [r6, #-1]
 800393c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003940:	1b92      	subs	r2, r2, r6
 8003942:	6122      	str	r2, [r4, #16]
 8003944:	f8cd a000 	str.w	sl, [sp]
 8003948:	464b      	mov	r3, r9
 800394a:	aa03      	add	r2, sp, #12
 800394c:	4621      	mov	r1, r4
 800394e:	4640      	mov	r0, r8
 8003950:	f7ff fee2 	bl	8003718 <_printf_common>
 8003954:	3001      	adds	r0, #1
 8003956:	d14c      	bne.n	80039f2 <_printf_i+0x1fe>
 8003958:	f04f 30ff 	mov.w	r0, #4294967295
 800395c:	b004      	add	sp, #16
 800395e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003962:	4835      	ldr	r0, [pc, #212]	; (8003a38 <_printf_i+0x244>)
 8003964:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	680e      	ldr	r6, [r1, #0]
 800396c:	061f      	lsls	r7, r3, #24
 800396e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003972:	600e      	str	r6, [r1, #0]
 8003974:	d514      	bpl.n	80039a0 <_printf_i+0x1ac>
 8003976:	07d9      	lsls	r1, r3, #31
 8003978:	bf44      	itt	mi
 800397a:	f043 0320 	orrmi.w	r3, r3, #32
 800397e:	6023      	strmi	r3, [r4, #0]
 8003980:	b91d      	cbnz	r5, 800398a <_printf_i+0x196>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	f023 0320 	bic.w	r3, r3, #32
 8003988:	6023      	str	r3, [r4, #0]
 800398a:	2310      	movs	r3, #16
 800398c:	e7b0      	b.n	80038f0 <_printf_i+0xfc>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	f043 0320 	orr.w	r3, r3, #32
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	2378      	movs	r3, #120	; 0x78
 8003998:	4828      	ldr	r0, [pc, #160]	; (8003a3c <_printf_i+0x248>)
 800399a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800399e:	e7e3      	b.n	8003968 <_printf_i+0x174>
 80039a0:	065e      	lsls	r6, r3, #25
 80039a2:	bf48      	it	mi
 80039a4:	b2ad      	uxthmi	r5, r5
 80039a6:	e7e6      	b.n	8003976 <_printf_i+0x182>
 80039a8:	4616      	mov	r6, r2
 80039aa:	e7bb      	b.n	8003924 <_printf_i+0x130>
 80039ac:	680b      	ldr	r3, [r1, #0]
 80039ae:	6826      	ldr	r6, [r4, #0]
 80039b0:	6960      	ldr	r0, [r4, #20]
 80039b2:	1d1d      	adds	r5, r3, #4
 80039b4:	600d      	str	r5, [r1, #0]
 80039b6:	0635      	lsls	r5, r6, #24
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	d501      	bpl.n	80039c0 <_printf_i+0x1cc>
 80039bc:	6018      	str	r0, [r3, #0]
 80039be:	e002      	b.n	80039c6 <_printf_i+0x1d2>
 80039c0:	0671      	lsls	r1, r6, #25
 80039c2:	d5fb      	bpl.n	80039bc <_printf_i+0x1c8>
 80039c4:	8018      	strh	r0, [r3, #0]
 80039c6:	2300      	movs	r3, #0
 80039c8:	6123      	str	r3, [r4, #16]
 80039ca:	4616      	mov	r6, r2
 80039cc:	e7ba      	b.n	8003944 <_printf_i+0x150>
 80039ce:	680b      	ldr	r3, [r1, #0]
 80039d0:	1d1a      	adds	r2, r3, #4
 80039d2:	600a      	str	r2, [r1, #0]
 80039d4:	681e      	ldr	r6, [r3, #0]
 80039d6:	6862      	ldr	r2, [r4, #4]
 80039d8:	2100      	movs	r1, #0
 80039da:	4630      	mov	r0, r6
 80039dc:	f7fc fc00 	bl	80001e0 <memchr>
 80039e0:	b108      	cbz	r0, 80039e6 <_printf_i+0x1f2>
 80039e2:	1b80      	subs	r0, r0, r6
 80039e4:	6060      	str	r0, [r4, #4]
 80039e6:	6863      	ldr	r3, [r4, #4]
 80039e8:	6123      	str	r3, [r4, #16]
 80039ea:	2300      	movs	r3, #0
 80039ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039f0:	e7a8      	b.n	8003944 <_printf_i+0x150>
 80039f2:	6923      	ldr	r3, [r4, #16]
 80039f4:	4632      	mov	r2, r6
 80039f6:	4649      	mov	r1, r9
 80039f8:	4640      	mov	r0, r8
 80039fa:	47d0      	blx	sl
 80039fc:	3001      	adds	r0, #1
 80039fe:	d0ab      	beq.n	8003958 <_printf_i+0x164>
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	079b      	lsls	r3, r3, #30
 8003a04:	d413      	bmi.n	8003a2e <_printf_i+0x23a>
 8003a06:	68e0      	ldr	r0, [r4, #12]
 8003a08:	9b03      	ldr	r3, [sp, #12]
 8003a0a:	4298      	cmp	r0, r3
 8003a0c:	bfb8      	it	lt
 8003a0e:	4618      	movlt	r0, r3
 8003a10:	e7a4      	b.n	800395c <_printf_i+0x168>
 8003a12:	2301      	movs	r3, #1
 8003a14:	4632      	mov	r2, r6
 8003a16:	4649      	mov	r1, r9
 8003a18:	4640      	mov	r0, r8
 8003a1a:	47d0      	blx	sl
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d09b      	beq.n	8003958 <_printf_i+0x164>
 8003a20:	3501      	adds	r5, #1
 8003a22:	68e3      	ldr	r3, [r4, #12]
 8003a24:	9903      	ldr	r1, [sp, #12]
 8003a26:	1a5b      	subs	r3, r3, r1
 8003a28:	42ab      	cmp	r3, r5
 8003a2a:	dcf2      	bgt.n	8003a12 <_printf_i+0x21e>
 8003a2c:	e7eb      	b.n	8003a06 <_printf_i+0x212>
 8003a2e:	2500      	movs	r5, #0
 8003a30:	f104 0619 	add.w	r6, r4, #25
 8003a34:	e7f5      	b.n	8003a22 <_printf_i+0x22e>
 8003a36:	bf00      	nop
 8003a38:	080042e3 	.word	0x080042e3
 8003a3c:	080042f4 	.word	0x080042f4

08003a40 <__swbuf_r>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	460e      	mov	r6, r1
 8003a44:	4614      	mov	r4, r2
 8003a46:	4605      	mov	r5, r0
 8003a48:	b118      	cbz	r0, 8003a52 <__swbuf_r+0x12>
 8003a4a:	6983      	ldr	r3, [r0, #24]
 8003a4c:	b90b      	cbnz	r3, 8003a52 <__swbuf_r+0x12>
 8003a4e:	f000 f9d9 	bl	8003e04 <__sinit>
 8003a52:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <__swbuf_r+0x98>)
 8003a54:	429c      	cmp	r4, r3
 8003a56:	d12b      	bne.n	8003ab0 <__swbuf_r+0x70>
 8003a58:	686c      	ldr	r4, [r5, #4]
 8003a5a:	69a3      	ldr	r3, [r4, #24]
 8003a5c:	60a3      	str	r3, [r4, #8]
 8003a5e:	89a3      	ldrh	r3, [r4, #12]
 8003a60:	071a      	lsls	r2, r3, #28
 8003a62:	d52f      	bpl.n	8003ac4 <__swbuf_r+0x84>
 8003a64:	6923      	ldr	r3, [r4, #16]
 8003a66:	b36b      	cbz	r3, 8003ac4 <__swbuf_r+0x84>
 8003a68:	6923      	ldr	r3, [r4, #16]
 8003a6a:	6820      	ldr	r0, [r4, #0]
 8003a6c:	1ac0      	subs	r0, r0, r3
 8003a6e:	6963      	ldr	r3, [r4, #20]
 8003a70:	b2f6      	uxtb	r6, r6
 8003a72:	4283      	cmp	r3, r0
 8003a74:	4637      	mov	r7, r6
 8003a76:	dc04      	bgt.n	8003a82 <__swbuf_r+0x42>
 8003a78:	4621      	mov	r1, r4
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f000 f92e 	bl	8003cdc <_fflush_r>
 8003a80:	bb30      	cbnz	r0, 8003ad0 <__swbuf_r+0x90>
 8003a82:	68a3      	ldr	r3, [r4, #8]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	60a3      	str	r3, [r4, #8]
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	6022      	str	r2, [r4, #0]
 8003a8e:	701e      	strb	r6, [r3, #0]
 8003a90:	6963      	ldr	r3, [r4, #20]
 8003a92:	3001      	adds	r0, #1
 8003a94:	4283      	cmp	r3, r0
 8003a96:	d004      	beq.n	8003aa2 <__swbuf_r+0x62>
 8003a98:	89a3      	ldrh	r3, [r4, #12]
 8003a9a:	07db      	lsls	r3, r3, #31
 8003a9c:	d506      	bpl.n	8003aac <__swbuf_r+0x6c>
 8003a9e:	2e0a      	cmp	r6, #10
 8003aa0:	d104      	bne.n	8003aac <__swbuf_r+0x6c>
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	f000 f919 	bl	8003cdc <_fflush_r>
 8003aaa:	b988      	cbnz	r0, 8003ad0 <__swbuf_r+0x90>
 8003aac:	4638      	mov	r0, r7
 8003aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <__swbuf_r+0x9c>)
 8003ab2:	429c      	cmp	r4, r3
 8003ab4:	d101      	bne.n	8003aba <__swbuf_r+0x7a>
 8003ab6:	68ac      	ldr	r4, [r5, #8]
 8003ab8:	e7cf      	b.n	8003a5a <__swbuf_r+0x1a>
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <__swbuf_r+0xa0>)
 8003abc:	429c      	cmp	r4, r3
 8003abe:	bf08      	it	eq
 8003ac0:	68ec      	ldreq	r4, [r5, #12]
 8003ac2:	e7ca      	b.n	8003a5a <__swbuf_r+0x1a>
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f000 f80c 	bl	8003ae4 <__swsetup_r>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d0cb      	beq.n	8003a68 <__swbuf_r+0x28>
 8003ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8003ad4:	e7ea      	b.n	8003aac <__swbuf_r+0x6c>
 8003ad6:	bf00      	nop
 8003ad8:	08004328 	.word	0x08004328
 8003adc:	08004348 	.word	0x08004348
 8003ae0:	08004308 	.word	0x08004308

08003ae4 <__swsetup_r>:
 8003ae4:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <__swsetup_r+0xcc>)
 8003ae6:	b570      	push	{r4, r5, r6, lr}
 8003ae8:	681d      	ldr	r5, [r3, #0]
 8003aea:	4606      	mov	r6, r0
 8003aec:	460c      	mov	r4, r1
 8003aee:	b125      	cbz	r5, 8003afa <__swsetup_r+0x16>
 8003af0:	69ab      	ldr	r3, [r5, #24]
 8003af2:	b913      	cbnz	r3, 8003afa <__swsetup_r+0x16>
 8003af4:	4628      	mov	r0, r5
 8003af6:	f000 f985 	bl	8003e04 <__sinit>
 8003afa:	4b2e      	ldr	r3, [pc, #184]	; (8003bb4 <__swsetup_r+0xd0>)
 8003afc:	429c      	cmp	r4, r3
 8003afe:	d10f      	bne.n	8003b20 <__swsetup_r+0x3c>
 8003b00:	686c      	ldr	r4, [r5, #4]
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b08:	0719      	lsls	r1, r3, #28
 8003b0a:	d42c      	bmi.n	8003b66 <__swsetup_r+0x82>
 8003b0c:	06dd      	lsls	r5, r3, #27
 8003b0e:	d411      	bmi.n	8003b34 <__swsetup_r+0x50>
 8003b10:	2309      	movs	r3, #9
 8003b12:	6033      	str	r3, [r6, #0]
 8003b14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b18:	81a3      	strh	r3, [r4, #12]
 8003b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1e:	e03e      	b.n	8003b9e <__swsetup_r+0xba>
 8003b20:	4b25      	ldr	r3, [pc, #148]	; (8003bb8 <__swsetup_r+0xd4>)
 8003b22:	429c      	cmp	r4, r3
 8003b24:	d101      	bne.n	8003b2a <__swsetup_r+0x46>
 8003b26:	68ac      	ldr	r4, [r5, #8]
 8003b28:	e7eb      	b.n	8003b02 <__swsetup_r+0x1e>
 8003b2a:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <__swsetup_r+0xd8>)
 8003b2c:	429c      	cmp	r4, r3
 8003b2e:	bf08      	it	eq
 8003b30:	68ec      	ldreq	r4, [r5, #12]
 8003b32:	e7e6      	b.n	8003b02 <__swsetup_r+0x1e>
 8003b34:	0758      	lsls	r0, r3, #29
 8003b36:	d512      	bpl.n	8003b5e <__swsetup_r+0x7a>
 8003b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b3a:	b141      	cbz	r1, 8003b4e <__swsetup_r+0x6a>
 8003b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b40:	4299      	cmp	r1, r3
 8003b42:	d002      	beq.n	8003b4a <__swsetup_r+0x66>
 8003b44:	4630      	mov	r0, r6
 8003b46:	f7ff fb29 	bl	800319c <_free_r>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8003b4e:	89a3      	ldrh	r3, [r4, #12]
 8003b50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b54:	81a3      	strh	r3, [r4, #12]
 8003b56:	2300      	movs	r3, #0
 8003b58:	6063      	str	r3, [r4, #4]
 8003b5a:	6923      	ldr	r3, [r4, #16]
 8003b5c:	6023      	str	r3, [r4, #0]
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	f043 0308 	orr.w	r3, r3, #8
 8003b64:	81a3      	strh	r3, [r4, #12]
 8003b66:	6923      	ldr	r3, [r4, #16]
 8003b68:	b94b      	cbnz	r3, 8003b7e <__swsetup_r+0x9a>
 8003b6a:	89a3      	ldrh	r3, [r4, #12]
 8003b6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b74:	d003      	beq.n	8003b7e <__swsetup_r+0x9a>
 8003b76:	4621      	mov	r1, r4
 8003b78:	4630      	mov	r0, r6
 8003b7a:	f000 fa07 	bl	8003f8c <__smakebuf_r>
 8003b7e:	89a0      	ldrh	r0, [r4, #12]
 8003b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b84:	f010 0301 	ands.w	r3, r0, #1
 8003b88:	d00a      	beq.n	8003ba0 <__swsetup_r+0xbc>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60a3      	str	r3, [r4, #8]
 8003b8e:	6963      	ldr	r3, [r4, #20]
 8003b90:	425b      	negs	r3, r3
 8003b92:	61a3      	str	r3, [r4, #24]
 8003b94:	6923      	ldr	r3, [r4, #16]
 8003b96:	b943      	cbnz	r3, 8003baa <__swsetup_r+0xc6>
 8003b98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b9c:	d1ba      	bne.n	8003b14 <__swsetup_r+0x30>
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ba0:	0781      	lsls	r1, r0, #30
 8003ba2:	bf58      	it	pl
 8003ba4:	6963      	ldrpl	r3, [r4, #20]
 8003ba6:	60a3      	str	r3, [r4, #8]
 8003ba8:	e7f4      	b.n	8003b94 <__swsetup_r+0xb0>
 8003baa:	2000      	movs	r0, #0
 8003bac:	e7f7      	b.n	8003b9e <__swsetup_r+0xba>
 8003bae:	bf00      	nop
 8003bb0:	2000000c 	.word	0x2000000c
 8003bb4:	08004328 	.word	0x08004328
 8003bb8:	08004348 	.word	0x08004348
 8003bbc:	08004308 	.word	0x08004308

08003bc0 <abort>:
 8003bc0:	b508      	push	{r3, lr}
 8003bc2:	2006      	movs	r0, #6
 8003bc4:	f000 fa4a 	bl	800405c <raise>
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f7fd fd8f 	bl	80016ec <_exit>
	...

08003bd0 <__sflush_r>:
 8003bd0:	898a      	ldrh	r2, [r1, #12]
 8003bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd6:	4605      	mov	r5, r0
 8003bd8:	0710      	lsls	r0, r2, #28
 8003bda:	460c      	mov	r4, r1
 8003bdc:	d458      	bmi.n	8003c90 <__sflush_r+0xc0>
 8003bde:	684b      	ldr	r3, [r1, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	dc05      	bgt.n	8003bf0 <__sflush_r+0x20>
 8003be4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	dc02      	bgt.n	8003bf0 <__sflush_r+0x20>
 8003bea:	2000      	movs	r0, #0
 8003bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bf2:	2e00      	cmp	r6, #0
 8003bf4:	d0f9      	beq.n	8003bea <__sflush_r+0x1a>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bfc:	682f      	ldr	r7, [r5, #0]
 8003bfe:	602b      	str	r3, [r5, #0]
 8003c00:	d032      	beq.n	8003c68 <__sflush_r+0x98>
 8003c02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c04:	89a3      	ldrh	r3, [r4, #12]
 8003c06:	075a      	lsls	r2, r3, #29
 8003c08:	d505      	bpl.n	8003c16 <__sflush_r+0x46>
 8003c0a:	6863      	ldr	r3, [r4, #4]
 8003c0c:	1ac0      	subs	r0, r0, r3
 8003c0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c10:	b10b      	cbz	r3, 8003c16 <__sflush_r+0x46>
 8003c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c14:	1ac0      	subs	r0, r0, r3
 8003c16:	2300      	movs	r3, #0
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c1c:	6a21      	ldr	r1, [r4, #32]
 8003c1e:	4628      	mov	r0, r5
 8003c20:	47b0      	blx	r6
 8003c22:	1c43      	adds	r3, r0, #1
 8003c24:	89a3      	ldrh	r3, [r4, #12]
 8003c26:	d106      	bne.n	8003c36 <__sflush_r+0x66>
 8003c28:	6829      	ldr	r1, [r5, #0]
 8003c2a:	291d      	cmp	r1, #29
 8003c2c:	d82c      	bhi.n	8003c88 <__sflush_r+0xb8>
 8003c2e:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <__sflush_r+0x108>)
 8003c30:	40ca      	lsrs	r2, r1
 8003c32:	07d6      	lsls	r6, r2, #31
 8003c34:	d528      	bpl.n	8003c88 <__sflush_r+0xb8>
 8003c36:	2200      	movs	r2, #0
 8003c38:	6062      	str	r2, [r4, #4]
 8003c3a:	04d9      	lsls	r1, r3, #19
 8003c3c:	6922      	ldr	r2, [r4, #16]
 8003c3e:	6022      	str	r2, [r4, #0]
 8003c40:	d504      	bpl.n	8003c4c <__sflush_r+0x7c>
 8003c42:	1c42      	adds	r2, r0, #1
 8003c44:	d101      	bne.n	8003c4a <__sflush_r+0x7a>
 8003c46:	682b      	ldr	r3, [r5, #0]
 8003c48:	b903      	cbnz	r3, 8003c4c <__sflush_r+0x7c>
 8003c4a:	6560      	str	r0, [r4, #84]	; 0x54
 8003c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c4e:	602f      	str	r7, [r5, #0]
 8003c50:	2900      	cmp	r1, #0
 8003c52:	d0ca      	beq.n	8003bea <__sflush_r+0x1a>
 8003c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c58:	4299      	cmp	r1, r3
 8003c5a:	d002      	beq.n	8003c62 <__sflush_r+0x92>
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f7ff fa9d 	bl	800319c <_free_r>
 8003c62:	2000      	movs	r0, #0
 8003c64:	6360      	str	r0, [r4, #52]	; 0x34
 8003c66:	e7c1      	b.n	8003bec <__sflush_r+0x1c>
 8003c68:	6a21      	ldr	r1, [r4, #32]
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	47b0      	blx	r6
 8003c70:	1c41      	adds	r1, r0, #1
 8003c72:	d1c7      	bne.n	8003c04 <__sflush_r+0x34>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0c4      	beq.n	8003c04 <__sflush_r+0x34>
 8003c7a:	2b1d      	cmp	r3, #29
 8003c7c:	d001      	beq.n	8003c82 <__sflush_r+0xb2>
 8003c7e:	2b16      	cmp	r3, #22
 8003c80:	d101      	bne.n	8003c86 <__sflush_r+0xb6>
 8003c82:	602f      	str	r7, [r5, #0]
 8003c84:	e7b1      	b.n	8003bea <__sflush_r+0x1a>
 8003c86:	89a3      	ldrh	r3, [r4, #12]
 8003c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c8c:	81a3      	strh	r3, [r4, #12]
 8003c8e:	e7ad      	b.n	8003bec <__sflush_r+0x1c>
 8003c90:	690f      	ldr	r7, [r1, #16]
 8003c92:	2f00      	cmp	r7, #0
 8003c94:	d0a9      	beq.n	8003bea <__sflush_r+0x1a>
 8003c96:	0793      	lsls	r3, r2, #30
 8003c98:	680e      	ldr	r6, [r1, #0]
 8003c9a:	bf08      	it	eq
 8003c9c:	694b      	ldreq	r3, [r1, #20]
 8003c9e:	600f      	str	r7, [r1, #0]
 8003ca0:	bf18      	it	ne
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	eba6 0807 	sub.w	r8, r6, r7
 8003ca8:	608b      	str	r3, [r1, #8]
 8003caa:	f1b8 0f00 	cmp.w	r8, #0
 8003cae:	dd9c      	ble.n	8003bea <__sflush_r+0x1a>
 8003cb0:	6a21      	ldr	r1, [r4, #32]
 8003cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003cb4:	4643      	mov	r3, r8
 8003cb6:	463a      	mov	r2, r7
 8003cb8:	4628      	mov	r0, r5
 8003cba:	47b0      	blx	r6
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	dc06      	bgt.n	8003cce <__sflush_r+0xfe>
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc6:	81a3      	strh	r3, [r4, #12]
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	e78e      	b.n	8003bec <__sflush_r+0x1c>
 8003cce:	4407      	add	r7, r0
 8003cd0:	eba8 0800 	sub.w	r8, r8, r0
 8003cd4:	e7e9      	b.n	8003caa <__sflush_r+0xda>
 8003cd6:	bf00      	nop
 8003cd8:	20400001 	.word	0x20400001

08003cdc <_fflush_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	690b      	ldr	r3, [r1, #16]
 8003ce0:	4605      	mov	r5, r0
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	b913      	cbnz	r3, 8003cec <_fflush_r+0x10>
 8003ce6:	2500      	movs	r5, #0
 8003ce8:	4628      	mov	r0, r5
 8003cea:	bd38      	pop	{r3, r4, r5, pc}
 8003cec:	b118      	cbz	r0, 8003cf6 <_fflush_r+0x1a>
 8003cee:	6983      	ldr	r3, [r0, #24]
 8003cf0:	b90b      	cbnz	r3, 8003cf6 <_fflush_r+0x1a>
 8003cf2:	f000 f887 	bl	8003e04 <__sinit>
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <_fflush_r+0x6c>)
 8003cf8:	429c      	cmp	r4, r3
 8003cfa:	d11b      	bne.n	8003d34 <_fflush_r+0x58>
 8003cfc:	686c      	ldr	r4, [r5, #4]
 8003cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ef      	beq.n	8003ce6 <_fflush_r+0xa>
 8003d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d08:	07d0      	lsls	r0, r2, #31
 8003d0a:	d404      	bmi.n	8003d16 <_fflush_r+0x3a>
 8003d0c:	0599      	lsls	r1, r3, #22
 8003d0e:	d402      	bmi.n	8003d16 <_fflush_r+0x3a>
 8003d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d12:	f000 f915 	bl	8003f40 <__retarget_lock_acquire_recursive>
 8003d16:	4628      	mov	r0, r5
 8003d18:	4621      	mov	r1, r4
 8003d1a:	f7ff ff59 	bl	8003bd0 <__sflush_r>
 8003d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d20:	07da      	lsls	r2, r3, #31
 8003d22:	4605      	mov	r5, r0
 8003d24:	d4e0      	bmi.n	8003ce8 <_fflush_r+0xc>
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	059b      	lsls	r3, r3, #22
 8003d2a:	d4dd      	bmi.n	8003ce8 <_fflush_r+0xc>
 8003d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d2e:	f000 f908 	bl	8003f42 <__retarget_lock_release_recursive>
 8003d32:	e7d9      	b.n	8003ce8 <_fflush_r+0xc>
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <_fflush_r+0x70>)
 8003d36:	429c      	cmp	r4, r3
 8003d38:	d101      	bne.n	8003d3e <_fflush_r+0x62>
 8003d3a:	68ac      	ldr	r4, [r5, #8]
 8003d3c:	e7df      	b.n	8003cfe <_fflush_r+0x22>
 8003d3e:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <_fflush_r+0x74>)
 8003d40:	429c      	cmp	r4, r3
 8003d42:	bf08      	it	eq
 8003d44:	68ec      	ldreq	r4, [r5, #12]
 8003d46:	e7da      	b.n	8003cfe <_fflush_r+0x22>
 8003d48:	08004328 	.word	0x08004328
 8003d4c:	08004348 	.word	0x08004348
 8003d50:	08004308 	.word	0x08004308

08003d54 <std>:
 8003d54:	2300      	movs	r3, #0
 8003d56:	b510      	push	{r4, lr}
 8003d58:	4604      	mov	r4, r0
 8003d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8003d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d62:	6083      	str	r3, [r0, #8]
 8003d64:	8181      	strh	r1, [r0, #12]
 8003d66:	6643      	str	r3, [r0, #100]	; 0x64
 8003d68:	81c2      	strh	r2, [r0, #14]
 8003d6a:	6183      	str	r3, [r0, #24]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	2208      	movs	r2, #8
 8003d70:	305c      	adds	r0, #92	; 0x5c
 8003d72:	f7ff fa0b 	bl	800318c <memset>
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <std+0x38>)
 8003d78:	6263      	str	r3, [r4, #36]	; 0x24
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <std+0x3c>)
 8003d7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <std+0x40>)
 8003d80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <std+0x44>)
 8003d84:	6224      	str	r4, [r4, #32]
 8003d86:	6323      	str	r3, [r4, #48]	; 0x30
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	bf00      	nop
 8003d8c:	08004095 	.word	0x08004095
 8003d90:	080040b7 	.word	0x080040b7
 8003d94:	080040ef 	.word	0x080040ef
 8003d98:	08004113 	.word	0x08004113

08003d9c <_cleanup_r>:
 8003d9c:	4901      	ldr	r1, [pc, #4]	; (8003da4 <_cleanup_r+0x8>)
 8003d9e:	f000 b8af 	b.w	8003f00 <_fwalk_reent>
 8003da2:	bf00      	nop
 8003da4:	08003cdd 	.word	0x08003cdd

08003da8 <__sfmoreglue>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	1e4a      	subs	r2, r1, #1
 8003dac:	2568      	movs	r5, #104	; 0x68
 8003dae:	4355      	muls	r5, r2
 8003db0:	460e      	mov	r6, r1
 8003db2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003db6:	f7ff fa41 	bl	800323c <_malloc_r>
 8003dba:	4604      	mov	r4, r0
 8003dbc:	b140      	cbz	r0, 8003dd0 <__sfmoreglue+0x28>
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	e9c0 1600 	strd	r1, r6, [r0]
 8003dc4:	300c      	adds	r0, #12
 8003dc6:	60a0      	str	r0, [r4, #8]
 8003dc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003dcc:	f7ff f9de 	bl	800318c <memset>
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}

08003dd4 <__sfp_lock_acquire>:
 8003dd4:	4801      	ldr	r0, [pc, #4]	; (8003ddc <__sfp_lock_acquire+0x8>)
 8003dd6:	f000 b8b3 	b.w	8003f40 <__retarget_lock_acquire_recursive>
 8003dda:	bf00      	nop
 8003ddc:	20000148 	.word	0x20000148

08003de0 <__sfp_lock_release>:
 8003de0:	4801      	ldr	r0, [pc, #4]	; (8003de8 <__sfp_lock_release+0x8>)
 8003de2:	f000 b8ae 	b.w	8003f42 <__retarget_lock_release_recursive>
 8003de6:	bf00      	nop
 8003de8:	20000148 	.word	0x20000148

08003dec <__sinit_lock_acquire>:
 8003dec:	4801      	ldr	r0, [pc, #4]	; (8003df4 <__sinit_lock_acquire+0x8>)
 8003dee:	f000 b8a7 	b.w	8003f40 <__retarget_lock_acquire_recursive>
 8003df2:	bf00      	nop
 8003df4:	20000143 	.word	0x20000143

08003df8 <__sinit_lock_release>:
 8003df8:	4801      	ldr	r0, [pc, #4]	; (8003e00 <__sinit_lock_release+0x8>)
 8003dfa:	f000 b8a2 	b.w	8003f42 <__retarget_lock_release_recursive>
 8003dfe:	bf00      	nop
 8003e00:	20000143 	.word	0x20000143

08003e04 <__sinit>:
 8003e04:	b510      	push	{r4, lr}
 8003e06:	4604      	mov	r4, r0
 8003e08:	f7ff fff0 	bl	8003dec <__sinit_lock_acquire>
 8003e0c:	69a3      	ldr	r3, [r4, #24]
 8003e0e:	b11b      	cbz	r3, 8003e18 <__sinit+0x14>
 8003e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e14:	f7ff bff0 	b.w	8003df8 <__sinit_lock_release>
 8003e18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e1c:	6523      	str	r3, [r4, #80]	; 0x50
 8003e1e:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <__sinit+0x68>)
 8003e20:	4a13      	ldr	r2, [pc, #76]	; (8003e70 <__sinit+0x6c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e26:	42a3      	cmp	r3, r4
 8003e28:	bf04      	itt	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	61a3      	streq	r3, [r4, #24]
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f000 f820 	bl	8003e74 <__sfp>
 8003e34:	6060      	str	r0, [r4, #4]
 8003e36:	4620      	mov	r0, r4
 8003e38:	f000 f81c 	bl	8003e74 <__sfp>
 8003e3c:	60a0      	str	r0, [r4, #8]
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f000 f818 	bl	8003e74 <__sfp>
 8003e44:	2200      	movs	r2, #0
 8003e46:	60e0      	str	r0, [r4, #12]
 8003e48:	2104      	movs	r1, #4
 8003e4a:	6860      	ldr	r0, [r4, #4]
 8003e4c:	f7ff ff82 	bl	8003d54 <std>
 8003e50:	68a0      	ldr	r0, [r4, #8]
 8003e52:	2201      	movs	r2, #1
 8003e54:	2109      	movs	r1, #9
 8003e56:	f7ff ff7d 	bl	8003d54 <std>
 8003e5a:	68e0      	ldr	r0, [r4, #12]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	2112      	movs	r1, #18
 8003e60:	f7ff ff78 	bl	8003d54 <std>
 8003e64:	2301      	movs	r3, #1
 8003e66:	61a3      	str	r3, [r4, #24]
 8003e68:	e7d2      	b.n	8003e10 <__sinit+0xc>
 8003e6a:	bf00      	nop
 8003e6c:	0800421c 	.word	0x0800421c
 8003e70:	08003d9d 	.word	0x08003d9d

08003e74 <__sfp>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	4607      	mov	r7, r0
 8003e78:	f7ff ffac 	bl	8003dd4 <__sfp_lock_acquire>
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <__sfp+0x84>)
 8003e7e:	681e      	ldr	r6, [r3, #0]
 8003e80:	69b3      	ldr	r3, [r6, #24]
 8003e82:	b913      	cbnz	r3, 8003e8a <__sfp+0x16>
 8003e84:	4630      	mov	r0, r6
 8003e86:	f7ff ffbd 	bl	8003e04 <__sinit>
 8003e8a:	3648      	adds	r6, #72	; 0x48
 8003e8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	d503      	bpl.n	8003e9c <__sfp+0x28>
 8003e94:	6833      	ldr	r3, [r6, #0]
 8003e96:	b30b      	cbz	r3, 8003edc <__sfp+0x68>
 8003e98:	6836      	ldr	r6, [r6, #0]
 8003e9a:	e7f7      	b.n	8003e8c <__sfp+0x18>
 8003e9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ea0:	b9d5      	cbnz	r5, 8003ed8 <__sfp+0x64>
 8003ea2:	4b16      	ldr	r3, [pc, #88]	; (8003efc <__sfp+0x88>)
 8003ea4:	60e3      	str	r3, [r4, #12]
 8003ea6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003eaa:	6665      	str	r5, [r4, #100]	; 0x64
 8003eac:	f000 f847 	bl	8003f3e <__retarget_lock_init_recursive>
 8003eb0:	f7ff ff96 	bl	8003de0 <__sfp_lock_release>
 8003eb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003eb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ebc:	6025      	str	r5, [r4, #0]
 8003ebe:	61a5      	str	r5, [r4, #24]
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ec8:	f7ff f960 	bl	800318c <memset>
 8003ecc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ed0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ed8:	3468      	adds	r4, #104	; 0x68
 8003eda:	e7d9      	b.n	8003e90 <__sfp+0x1c>
 8003edc:	2104      	movs	r1, #4
 8003ede:	4638      	mov	r0, r7
 8003ee0:	f7ff ff62 	bl	8003da8 <__sfmoreglue>
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	6030      	str	r0, [r6, #0]
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	d1d5      	bne.n	8003e98 <__sfp+0x24>
 8003eec:	f7ff ff78 	bl	8003de0 <__sfp_lock_release>
 8003ef0:	230c      	movs	r3, #12
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	e7ee      	b.n	8003ed4 <__sfp+0x60>
 8003ef6:	bf00      	nop
 8003ef8:	0800421c 	.word	0x0800421c
 8003efc:	ffff0001 	.word	0xffff0001

08003f00 <_fwalk_reent>:
 8003f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f04:	4606      	mov	r6, r0
 8003f06:	4688      	mov	r8, r1
 8003f08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f0c:	2700      	movs	r7, #0
 8003f0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f12:	f1b9 0901 	subs.w	r9, r9, #1
 8003f16:	d505      	bpl.n	8003f24 <_fwalk_reent+0x24>
 8003f18:	6824      	ldr	r4, [r4, #0]
 8003f1a:	2c00      	cmp	r4, #0
 8003f1c:	d1f7      	bne.n	8003f0e <_fwalk_reent+0xe>
 8003f1e:	4638      	mov	r0, r7
 8003f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f24:	89ab      	ldrh	r3, [r5, #12]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d907      	bls.n	8003f3a <_fwalk_reent+0x3a>
 8003f2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	d003      	beq.n	8003f3a <_fwalk_reent+0x3a>
 8003f32:	4629      	mov	r1, r5
 8003f34:	4630      	mov	r0, r6
 8003f36:	47c0      	blx	r8
 8003f38:	4307      	orrs	r7, r0
 8003f3a:	3568      	adds	r5, #104	; 0x68
 8003f3c:	e7e9      	b.n	8003f12 <_fwalk_reent+0x12>

08003f3e <__retarget_lock_init_recursive>:
 8003f3e:	4770      	bx	lr

08003f40 <__retarget_lock_acquire_recursive>:
 8003f40:	4770      	bx	lr

08003f42 <__retarget_lock_release_recursive>:
 8003f42:	4770      	bx	lr

08003f44 <__swhatbuf_r>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	460e      	mov	r6, r1
 8003f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4c:	2900      	cmp	r1, #0
 8003f4e:	b096      	sub	sp, #88	; 0x58
 8003f50:	4614      	mov	r4, r2
 8003f52:	461d      	mov	r5, r3
 8003f54:	da07      	bge.n	8003f66 <__swhatbuf_r+0x22>
 8003f56:	2300      	movs	r3, #0
 8003f58:	602b      	str	r3, [r5, #0]
 8003f5a:	89b3      	ldrh	r3, [r6, #12]
 8003f5c:	061a      	lsls	r2, r3, #24
 8003f5e:	d410      	bmi.n	8003f82 <__swhatbuf_r+0x3e>
 8003f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f64:	e00e      	b.n	8003f84 <__swhatbuf_r+0x40>
 8003f66:	466a      	mov	r2, sp
 8003f68:	f000 f8fa 	bl	8004160 <_fstat_r>
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	dbf2      	blt.n	8003f56 <__swhatbuf_r+0x12>
 8003f70:	9a01      	ldr	r2, [sp, #4]
 8003f72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f7a:	425a      	negs	r2, r3
 8003f7c:	415a      	adcs	r2, r3
 8003f7e:	602a      	str	r2, [r5, #0]
 8003f80:	e7ee      	b.n	8003f60 <__swhatbuf_r+0x1c>
 8003f82:	2340      	movs	r3, #64	; 0x40
 8003f84:	2000      	movs	r0, #0
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	b016      	add	sp, #88	; 0x58
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}

08003f8c <__smakebuf_r>:
 8003f8c:	898b      	ldrh	r3, [r1, #12]
 8003f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f90:	079d      	lsls	r5, r3, #30
 8003f92:	4606      	mov	r6, r0
 8003f94:	460c      	mov	r4, r1
 8003f96:	d507      	bpl.n	8003fa8 <__smakebuf_r+0x1c>
 8003f98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	6123      	str	r3, [r4, #16]
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	6163      	str	r3, [r4, #20]
 8003fa4:	b002      	add	sp, #8
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}
 8003fa8:	ab01      	add	r3, sp, #4
 8003faa:	466a      	mov	r2, sp
 8003fac:	f7ff ffca 	bl	8003f44 <__swhatbuf_r>
 8003fb0:	9900      	ldr	r1, [sp, #0]
 8003fb2:	4605      	mov	r5, r0
 8003fb4:	4630      	mov	r0, r6
 8003fb6:	f7ff f941 	bl	800323c <_malloc_r>
 8003fba:	b948      	cbnz	r0, 8003fd0 <__smakebuf_r+0x44>
 8003fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fc0:	059a      	lsls	r2, r3, #22
 8003fc2:	d4ef      	bmi.n	8003fa4 <__smakebuf_r+0x18>
 8003fc4:	f023 0303 	bic.w	r3, r3, #3
 8003fc8:	f043 0302 	orr.w	r3, r3, #2
 8003fcc:	81a3      	strh	r3, [r4, #12]
 8003fce:	e7e3      	b.n	8003f98 <__smakebuf_r+0xc>
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <__smakebuf_r+0x7c>)
 8003fd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	6020      	str	r0, [r4, #0]
 8003fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	9b00      	ldr	r3, [sp, #0]
 8003fe0:	6163      	str	r3, [r4, #20]
 8003fe2:	9b01      	ldr	r3, [sp, #4]
 8003fe4:	6120      	str	r0, [r4, #16]
 8003fe6:	b15b      	cbz	r3, 8004000 <__smakebuf_r+0x74>
 8003fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fec:	4630      	mov	r0, r6
 8003fee:	f000 f8c9 	bl	8004184 <_isatty_r>
 8003ff2:	b128      	cbz	r0, 8004000 <__smakebuf_r+0x74>
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	81a3      	strh	r3, [r4, #12]
 8004000:	89a0      	ldrh	r0, [r4, #12]
 8004002:	4305      	orrs	r5, r0
 8004004:	81a5      	strh	r5, [r4, #12]
 8004006:	e7cd      	b.n	8003fa4 <__smakebuf_r+0x18>
 8004008:	08003d9d 	.word	0x08003d9d

0800400c <_raise_r>:
 800400c:	291f      	cmp	r1, #31
 800400e:	b538      	push	{r3, r4, r5, lr}
 8004010:	4604      	mov	r4, r0
 8004012:	460d      	mov	r5, r1
 8004014:	d904      	bls.n	8004020 <_raise_r+0x14>
 8004016:	2316      	movs	r3, #22
 8004018:	6003      	str	r3, [r0, #0]
 800401a:	f04f 30ff 	mov.w	r0, #4294967295
 800401e:	bd38      	pop	{r3, r4, r5, pc}
 8004020:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004022:	b112      	cbz	r2, 800402a <_raise_r+0x1e>
 8004024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004028:	b94b      	cbnz	r3, 800403e <_raise_r+0x32>
 800402a:	4620      	mov	r0, r4
 800402c:	f000 f830 	bl	8004090 <_getpid_r>
 8004030:	462a      	mov	r2, r5
 8004032:	4601      	mov	r1, r0
 8004034:	4620      	mov	r0, r4
 8004036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800403a:	f000 b817 	b.w	800406c <_kill_r>
 800403e:	2b01      	cmp	r3, #1
 8004040:	d00a      	beq.n	8004058 <_raise_r+0x4c>
 8004042:	1c59      	adds	r1, r3, #1
 8004044:	d103      	bne.n	800404e <_raise_r+0x42>
 8004046:	2316      	movs	r3, #22
 8004048:	6003      	str	r3, [r0, #0]
 800404a:	2001      	movs	r0, #1
 800404c:	e7e7      	b.n	800401e <_raise_r+0x12>
 800404e:	2400      	movs	r4, #0
 8004050:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004054:	4628      	mov	r0, r5
 8004056:	4798      	blx	r3
 8004058:	2000      	movs	r0, #0
 800405a:	e7e0      	b.n	800401e <_raise_r+0x12>

0800405c <raise>:
 800405c:	4b02      	ldr	r3, [pc, #8]	; (8004068 <raise+0xc>)
 800405e:	4601      	mov	r1, r0
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	f7ff bfd3 	b.w	800400c <_raise_r>
 8004066:	bf00      	nop
 8004068:	2000000c 	.word	0x2000000c

0800406c <_kill_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	4d07      	ldr	r5, [pc, #28]	; (800408c <_kill_r+0x20>)
 8004070:	2300      	movs	r3, #0
 8004072:	4604      	mov	r4, r0
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	602b      	str	r3, [r5, #0]
 800407a:	f7fd fb27 	bl	80016cc <_kill>
 800407e:	1c43      	adds	r3, r0, #1
 8004080:	d102      	bne.n	8004088 <_kill_r+0x1c>
 8004082:	682b      	ldr	r3, [r5, #0]
 8004084:	b103      	cbz	r3, 8004088 <_kill_r+0x1c>
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	bd38      	pop	{r3, r4, r5, pc}
 800408a:	bf00      	nop
 800408c:	2000013c 	.word	0x2000013c

08004090 <_getpid_r>:
 8004090:	f7fd bb14 	b.w	80016bc <_getpid>

08004094 <__sread>:
 8004094:	b510      	push	{r4, lr}
 8004096:	460c      	mov	r4, r1
 8004098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800409c:	f000 f894 	bl	80041c8 <_read_r>
 80040a0:	2800      	cmp	r0, #0
 80040a2:	bfab      	itete	ge
 80040a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040a6:	89a3      	ldrhlt	r3, [r4, #12]
 80040a8:	181b      	addge	r3, r3, r0
 80040aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040ae:	bfac      	ite	ge
 80040b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80040b2:	81a3      	strhlt	r3, [r4, #12]
 80040b4:	bd10      	pop	{r4, pc}

080040b6 <__swrite>:
 80040b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ba:	461f      	mov	r7, r3
 80040bc:	898b      	ldrh	r3, [r1, #12]
 80040be:	05db      	lsls	r3, r3, #23
 80040c0:	4605      	mov	r5, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	4616      	mov	r6, r2
 80040c6:	d505      	bpl.n	80040d4 <__swrite+0x1e>
 80040c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040cc:	2302      	movs	r3, #2
 80040ce:	2200      	movs	r2, #0
 80040d0:	f000 f868 	bl	80041a4 <_lseek_r>
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040de:	81a3      	strh	r3, [r4, #12]
 80040e0:	4632      	mov	r2, r6
 80040e2:	463b      	mov	r3, r7
 80040e4:	4628      	mov	r0, r5
 80040e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ea:	f000 b817 	b.w	800411c <_write_r>

080040ee <__sseek>:
 80040ee:	b510      	push	{r4, lr}
 80040f0:	460c      	mov	r4, r1
 80040f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040f6:	f000 f855 	bl	80041a4 <_lseek_r>
 80040fa:	1c43      	adds	r3, r0, #1
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	bf15      	itete	ne
 8004100:	6560      	strne	r0, [r4, #84]	; 0x54
 8004102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800410a:	81a3      	strheq	r3, [r4, #12]
 800410c:	bf18      	it	ne
 800410e:	81a3      	strhne	r3, [r4, #12]
 8004110:	bd10      	pop	{r4, pc}

08004112 <__sclose>:
 8004112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004116:	f000 b813 	b.w	8004140 <_close_r>
	...

0800411c <_write_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4d07      	ldr	r5, [pc, #28]	; (800413c <_write_r+0x20>)
 8004120:	4604      	mov	r4, r0
 8004122:	4608      	mov	r0, r1
 8004124:	4611      	mov	r1, r2
 8004126:	2200      	movs	r2, #0
 8004128:	602a      	str	r2, [r5, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	f7fd fb05 	bl	800173a <_write>
 8004130:	1c43      	adds	r3, r0, #1
 8004132:	d102      	bne.n	800413a <_write_r+0x1e>
 8004134:	682b      	ldr	r3, [r5, #0]
 8004136:	b103      	cbz	r3, 800413a <_write_r+0x1e>
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	bd38      	pop	{r3, r4, r5, pc}
 800413c:	2000013c 	.word	0x2000013c

08004140 <_close_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4d06      	ldr	r5, [pc, #24]	; (800415c <_close_r+0x1c>)
 8004144:	2300      	movs	r3, #0
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	f7fd fb11 	bl	8001772 <_close>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_close_r+0x1a>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_close_r+0x1a>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	2000013c 	.word	0x2000013c

08004160 <_fstat_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4d07      	ldr	r5, [pc, #28]	; (8004180 <_fstat_r+0x20>)
 8004164:	2300      	movs	r3, #0
 8004166:	4604      	mov	r4, r0
 8004168:	4608      	mov	r0, r1
 800416a:	4611      	mov	r1, r2
 800416c:	602b      	str	r3, [r5, #0]
 800416e:	f7fd fb0c 	bl	800178a <_fstat>
 8004172:	1c43      	adds	r3, r0, #1
 8004174:	d102      	bne.n	800417c <_fstat_r+0x1c>
 8004176:	682b      	ldr	r3, [r5, #0]
 8004178:	b103      	cbz	r3, 800417c <_fstat_r+0x1c>
 800417a:	6023      	str	r3, [r4, #0]
 800417c:	bd38      	pop	{r3, r4, r5, pc}
 800417e:	bf00      	nop
 8004180:	2000013c 	.word	0x2000013c

08004184 <_isatty_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4d06      	ldr	r5, [pc, #24]	; (80041a0 <_isatty_r+0x1c>)
 8004188:	2300      	movs	r3, #0
 800418a:	4604      	mov	r4, r0
 800418c:	4608      	mov	r0, r1
 800418e:	602b      	str	r3, [r5, #0]
 8004190:	f7fd fb0b 	bl	80017aa <_isatty>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d102      	bne.n	800419e <_isatty_r+0x1a>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	b103      	cbz	r3, 800419e <_isatty_r+0x1a>
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	2000013c 	.word	0x2000013c

080041a4 <_lseek_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4d07      	ldr	r5, [pc, #28]	; (80041c4 <_lseek_r+0x20>)
 80041a8:	4604      	mov	r4, r0
 80041aa:	4608      	mov	r0, r1
 80041ac:	4611      	mov	r1, r2
 80041ae:	2200      	movs	r2, #0
 80041b0:	602a      	str	r2, [r5, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f7fd fb04 	bl	80017c0 <_lseek>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d102      	bne.n	80041c2 <_lseek_r+0x1e>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	b103      	cbz	r3, 80041c2 <_lseek_r+0x1e>
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
 80041c4:	2000013c 	.word	0x2000013c

080041c8 <_read_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4d07      	ldr	r5, [pc, #28]	; (80041e8 <_read_r+0x20>)
 80041cc:	4604      	mov	r4, r0
 80041ce:	4608      	mov	r0, r1
 80041d0:	4611      	mov	r1, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	602a      	str	r2, [r5, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	f7fd fa92 	bl	8001700 <_read>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_read_r+0x1e>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_read_r+0x1e>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	2000013c 	.word	0x2000013c

080041ec <_init>:
 80041ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ee:	bf00      	nop
 80041f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f2:	bc08      	pop	{r3}
 80041f4:	469e      	mov	lr, r3
 80041f6:	4770      	bx	lr

080041f8 <_fini>:
 80041f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fa:	bf00      	nop
 80041fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fe:	bc08      	pop	{r3}
 8004200:	469e      	mov	lr, r3
 8004202:	4770      	bx	lr
